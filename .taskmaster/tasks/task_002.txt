# Task ID: 2
# Title: Testing Infrastructure & Framework Setup
# Status: pending
# Dependencies: None
# Priority: high
# Description: Establish comprehensive testing infrastructure to enable Test-Driven Development (TDD) workflow from day one. This foundational testing setup supports the development of all subsequent features with proper test coverage, mock strategies, and quality gates.
# Details:
**TESTING INFRASTRUCTURE REQUIREMENTS:**

**Core Testing Framework Setup:**
- Jest 29.x with TypeScript support and Next.js integration
- React Testing Library for component testing
- Supertest for API route testing
- Test database configuration (PostgreSQL test instance)
- @testing-library/jest-dom for enhanced matchers
- @testing-library/user-event for user interaction testing

**Test Database Configuration:**
- Separate PostgreSQL test database (postgresql://postgres:postgres@localhost:5432/ai_scorecard_test)
- Prisma test database setup with schema synchronization
- Database seeding utilities for consistent test data
- Transaction rollback between tests for isolation
- Database cleanup utilities

**TDD-Specific Tooling:**
- Jest configuration optimized for TDD workflow
- Test file structure that mirrors source code organization
- Custom Jest matchers for assessment scoring logic
- Mock utilities for external services (HubSpot, Email)
- Test data factories for consistent test objects

**Test Script Configuration:**
```json
{
  "scripts": {
    "test": "jest --watch",
    "test:ci": "jest --ci --coverage",
    "test:components": "jest --testPathPattern=components",
    "test:api": "jest --testPathPattern=api",
    "test:db": "jest --testPathPattern=database",
    "test:coverage": "jest --coverage --coverageReporters=text --coverageReporters=html",
    "test:integration": "jest --testPathPattern=integration"
  }
}
```

**Jest Configuration (jest.config.js):**
```javascript
const nextJest = require('next/jest')

const createJestConfig = nextJest({
  dir: './',
})

const customJestConfig = {
  setupFilesAfterEnv: ['<rootDir>/jest.setup.js'],
  testEnvironment: 'jest-environment-jsdom',
  moduleNameMapping: {
    '^@/(.*)$': '<rootDir>/$1',
    '^@/components/(.*)$': '<rootDir>/components/$1',
    '^@/lib/(.*)$': '<rootDir>/lib/$1',
    '^@/types/(.*)$': '<rootDir>/types/$1'
  },
  testPathIgnorePatterns: ['<rootDir>/.next/', '<rootDir>/node_modules/'],
  collectCoverageFrom: [
    'app/**/*.{js,jsx,ts,tsx}',
    'components/**/*.{js,jsx,ts,tsx}',
    'lib/**/*.{js,jsx,ts,tsx}',
    '!**/*.d.ts',
    '!**/node_modules/**'
  ],
  coverageThreshold: {
    global: {
      branches: 80,
      functions: 80,
      lines: 80,
      statements: 80
    }
  }
}

module.exports = createJestConfig(customJestConfig)
```

**Test Environment Setup:**
- Environment variable configuration for testing (.env.test)
- Mock implementations for external services:
  - HubSpot API (using MSW or manual mocks)
  - Email service (Resend/SendGrid mocks)
  - Database transactions with rollback
- Browser environment simulation for client-side code
- Node.js environment for API route testing

**Test Data Management:**
- Test data factories using libraries like Faker.js
- Database seeding scripts for consistent test scenarios
- Assessment response fixtures for scoring algorithm tests
- Mock user data that respects privacy requirements
- HubSpot integration test data structures

**Testing Utilities & Helpers:**
```typescript
// tests/utils/test-helpers.ts
export const createMockAssessment = (overrides?: Partial<Assessment>) => ({
  id: 'test-assessment-id',
  sessionId: 'test-session-id',
  responses: {
    'value_assurance_1': 'A',
    'customer_safe_1': 'B',
    // ... complete test responses
  },
  totalScore: 75,
  scoreBreakdown: {
    valueAssurance: 75,
    customerSafe: 80,
    riskCompliance: 70,
    governance: 65
  },
  scoreCategory: 'builder',
  ...overrides
});
```

**TDD WORKFLOW INTEGRATION:**
- Test file naming conventions (__{feature}__.test.ts)
- RED-GREEN-REFACTOR cycle documentation
- Test template generators for new features
- Coverage reporting that integrates with CI/CD
- Performance benchmarking for critical assessment functions

**MOCK STRATEGY DEFINITION:**
- **Mock External APIs**: HubSpot, email services, external HTTP calls
- **Use Real Database**: Test database with actual Prisma operations
- **Mock Browser APIs**: LocalStorage, window.location, timers
- **Real Business Logic**: All scoring algorithms, validation, state management

**QUALITY GATES:**
- Minimum 80% code coverage for new features
- All tests must pass before code commit
- Performance tests for assessment completion under 10 seconds
- Integration tests for complete assessment flow
- Component tests for all user-facing React components

**KEY FILES TO CREATE:**
- /jest.config.js - Jest configuration with Next.js integration
- /jest.setup.js - Global test setup and matchers
- /.env.test - Test environment variables
- /tests/utils/test-helpers.ts - Shared testing utilities
- /tests/utils/db-helpers.ts - Database testing utilities
- /tests/mocks/hubspot.ts - HubSpot API mocks
- /tests/mocks/email.ts - Email service mocks
- /tests/fixtures/assessment-data.ts - Test data fixtures
- /prisma/seed-test.ts - Test database seeding script

**ANTI-PATTERNS TO AVOID:**
- Mocking the methods being tested
- Testing mock behavior instead of real functionality
- Hardcoding expected results without computation
- Mocking Prisma queries (use test database instead)
- Suppressing React act() warnings

# Test Strategy:

