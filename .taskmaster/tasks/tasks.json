{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Project Foundation & Environment Setup",
        "description": "Establish the complete technical foundation for the AI Reality Check Scorecard with Next.js 14.2, TypeScript, PostgreSQL, and development tooling. This task creates the core project structure that enables all subsequent development work including TDD workflow support, following the technical architecture specifications.",
        "status": "done",
        "dependencies": [],
        "priority": "high",
        "details": "**TECHNICAL SPECIFICATIONS:**\n\n**Framework Setup (per technical-architecture.md):**\n- Next.js 14.2.x with App Router configuration\n- React 18.3.x with TypeScript 5.5.x strict mode\n- Node.js 20.x runtime environment\n- PostgreSQL 15+ database with connection pooling\n- Tailwind CSS 3.4.x with CSS custom properties support\n- Essential dependencies: Framer Motion 11.x, React Hook Form 7.52.x, Zod 3.23.x, next-themes 0.3.x\n\n**Database Integration:**\n- PostgreSQL 15+ with Prisma ORM setup\n- Database connection configuration for development/test/production\n- Environment-based database URL configuration\n- Connection pooling and optimization settings\n\n**Project Structure Implementation:**\n```\napp/\n├── layout.tsx                 # Root layout with providers\n├── page.tsx                  # Landing page (static)\n├── globals.css              # Global styles and CSS variables\n├── assessment/              # Assessment flow routes\n├── api/                     # API routes directory\n└── components/              # Reusable components\n    ├── ui/                  # Base UI components\n    ├── theme/               # Theme provider\n    ├── assessment/          # Assessment-specific components\n    └── layout/              # Layout components\n```\n\n**Environment Configuration:**\n- Environment variables setup (.env.example → .env.local)\n- Database connection strings for PostgreSQL 15+\n- Git repository initialization with main branch\n- Package.json with all required dependencies and scripts\n- TypeScript configuration (tsconfig.json) with strict mode\n- Tailwind CSS configuration with semantic color variables\n- ESLint and Prettier configuration for code quality\n\n**Next.js Configuration (per technical-architecture.md):**\n- next.config.js with optimizations for assessment platform\n- Bundle analyzer integration\n- Image optimization settings\n- API route configuration\n- Performance optimizations for executive user experience\n\n**CSS Custom Properties System:**\n```css\n:root {\n  --primary: #4f46e5;\n  --secondary: #6b7280;\n  --accent: #10b981;\n  --background: #ffffff;\n  --text: #111827;\n  --border: #e5e7eb;\n  \n  /* Assessment-specific colors */\n  --champion: #059669;\n  --builder: #0891b2;\n  --risk: #ea580c;\n  --alert: #dc2626;\n  --crisis: #991b1b;\n}\n```\n\n**Development Scripts:**\n- `npm run dev` - Development server\n- `npm run build` - Production build\n- `npm run lint` - Code linting\n- `npm run typecheck` - TypeScript validation\n- `npm run test` - Test execution setup\n- `npm run test:watch` - Test watch mode\n- `npm run db:migrate` - Database migrations\n- `npm run db:studio` - Prisma Studio\n\n**TDD SETUP REQUIREMENTS:**\n- Jest 29.x configuration with TypeScript support\n- React Testing Library setup for component testing\n- Project structure that supports test file organization\n- TypeScript configuration compatible with Jest\n- Import alias configuration for clean test imports\n- Test database configuration setup\n- Mock strategies for external dependencies\n- Development scripts preparation for test commands\n\n**Development Tooling (per technical-architecture.md):**\n- ESLint with Next.js and TypeScript rules\n- Prettier for code formatting\n- Husky for git hooks\n- lint-staged for pre-commit checks\n- TypeScript strict mode configuration\n- Path mapping for clean imports\n\n**KEY FILES TO CREATE:**\n- /package.json - All dependencies with explicit versions (Node.js 20.x, Next.js 14.2.x, PostgreSQL 15+)\n- /next.config.js - Next.js configuration with optimizations per technical-architecture.md\n- /tailwind.config.ts - Tailwind with semantic colors\n- /tsconfig.json - TypeScript strict configuration with path mapping\n- /jest.config.js - Jest configuration for TDD setup\n- /app/layout.tsx - Root layout with theme provider\n- /app/page.tsx - Landing page placeholder\n- /app/globals.css - CSS custom properties and base styles\n- /.env.example - Environment variables template including DATABASE_URL\n- /.gitignore - Git ignore patterns\n- /README.md - Project setup instructions with database setup\n- /prisma/schema.prisma - Initial Prisma schema\n\n**REFERENCE DOCUMENTATION:**\nComplete technical architecture specifications available at: /workspaces/ai-scorecard/implementation-spec/technical-architecture.md",
        "testStrategy": "",
        "subtasks": []
      },
      {
        "id": 2,
        "title": "Testing Infrastructure & Framework Setup",
        "description": "Establish comprehensive testing infrastructure to enable Test-Driven Development (TDD) workflow from day one. This foundational testing setup supports the development of all subsequent features with proper test coverage, mock strategies, and quality gates.",
        "details": "**TESTING INFRASTRUCTURE REQUIREMENTS:**\n\n**Core Testing Framework Setup:**\n- Jest 29.x with TypeScript support and Next.js integration\n- React Testing Library for component testing\n- Supertest for API route testing\n- Test database configuration (PostgreSQL test instance)\n- @testing-library/jest-dom for enhanced matchers\n- @testing-library/user-event for user interaction testing\n\n**Test Database Configuration:**\n- Separate PostgreSQL test database (postgresql://postgres:postgres@localhost:5432/ai_scorecard_test)\n- Prisma test database setup with schema synchronization\n- Database seeding utilities for consistent test data\n- Transaction rollback between tests for isolation\n- Database cleanup utilities\n\n**TDD-Specific Tooling:**\n- Jest configuration optimized for TDD workflow\n- Test file structure that mirrors source code organization\n- Custom Jest matchers for assessment scoring logic\n- Mock utilities for external services (HubSpot, Email)\n- Test data factories for consistent test objects\n\n**Test Script Configuration:**\n```json\n{\n  \"scripts\": {\n    \"test\": \"jest --watch\",\n    \"test:ci\": \"jest --ci --coverage\",\n    \"test:components\": \"jest --testPathPattern=components\",\n    \"test:api\": \"jest --testPathPattern=api\",\n    \"test:db\": \"jest --testPathPattern=database\",\n    \"test:coverage\": \"jest --coverage --coverageReporters=text --coverageReporters=html\",\n    \"test:integration\": \"jest --testPathPattern=integration\"\n  }\n}\n```\n\n**Jest Configuration (jest.config.js):**\n```javascript\nconst nextJest = require('next/jest')\n\nconst createJestConfig = nextJest({\n  dir: './',\n})\n\nconst customJestConfig = {\n  setupFilesAfterEnv: ['<rootDir>/jest.setup.js'],\n  testEnvironment: 'jest-environment-jsdom',\n  moduleNameMapping: {\n    '^@/(.*)$': '<rootDir>/$1',\n    '^@/components/(.*)$': '<rootDir>/components/$1',\n    '^@/lib/(.*)$': '<rootDir>/lib/$1',\n    '^@/types/(.*)$': '<rootDir>/types/$1'\n  },\n  testPathIgnorePatterns: ['<rootDir>/.next/', '<rootDir>/node_modules/'],\n  collectCoverageFrom: [\n    'app/**/*.{js,jsx,ts,tsx}',\n    'components/**/*.{js,jsx,ts,tsx}',\n    'lib/**/*.{js,jsx,ts,tsx}',\n    '!**/*.d.ts',\n    '!**/node_modules/**'\n  ],\n  coverageThreshold: {\n    global: {\n      branches: 80,\n      functions: 80,\n      lines: 80,\n      statements: 80\n    }\n  }\n}\n\nmodule.exports = createJestConfig(customJestConfig)\n```\n\n**Test Environment Setup:**\n- Environment variable configuration for testing (.env.test)\n- Mock implementations for external services:\n  - HubSpot API (using MSW or manual mocks)\n  - Email service (Resend/SendGrid mocks)\n  - Database transactions with rollback\n- Browser environment simulation for client-side code\n- Node.js environment for API route testing\n\n**Test Data Management:**\n- Test data factories using libraries like Faker.js\n- Database seeding scripts for consistent test scenarios\n- Assessment response fixtures for scoring algorithm tests\n- Mock user data that respects privacy requirements\n- HubSpot integration test data structures\n\n**Testing Utilities & Helpers:**\n```typescript\n// tests/utils/test-helpers.ts\nexport const createMockAssessment = (overrides?: Partial<Assessment>) => ({\n  id: 'test-assessment-id',\n  sessionId: 'test-session-id',\n  responses: {\n    'value_assurance_1': 'A',\n    'customer_safe_1': 'B',\n    // ... complete test responses\n  },\n  totalScore: 75,\n  scoreBreakdown: {\n    valueAssurance: 75,\n    customerSafe: 80,\n    riskCompliance: 70,\n    governance: 65\n  },\n  scoreCategory: 'builder',\n  ...overrides\n});\n```\n\n**TDD WORKFLOW INTEGRATION:**\n- Test file naming conventions (__{feature}__.test.ts)\n- RED-GREEN-REFACTOR cycle documentation\n- Test template generators for new features\n- Coverage reporting that integrates with CI/CD\n- Performance benchmarking for critical assessment functions\n\n**MOCK STRATEGY DEFINITION:**\n- **Mock External APIs**: HubSpot, email services, external HTTP calls\n- **Use Real Database**: Test database with actual Prisma operations\n- **Mock Browser APIs**: LocalStorage, window.location, timers\n- **Real Business Logic**: All scoring algorithms, validation, state management\n\n**QUALITY GATES:**\n- Minimum 80% code coverage for new features\n- All tests must pass before code commit\n- Performance tests for assessment completion under 10 seconds\n- Integration tests for complete assessment flow\n- Component tests for all user-facing React components\n\n**KEY FILES TO CREATE:**\n- /jest.config.js - Jest configuration with Next.js integration\n- /jest.setup.js - Global test setup and matchers\n- /.env.test - Test environment variables\n- /tests/utils/test-helpers.ts - Shared testing utilities\n- /tests/utils/db-helpers.ts - Database testing utilities\n- /tests/mocks/hubspot.ts - HubSpot API mocks\n- /tests/mocks/email.ts - Email service mocks\n- /tests/fixtures/assessment-data.ts - Test data fixtures\n- /prisma/seed-test.ts - Test database seeding script\n\n**ANTI-PATTERNS TO AVOID:**\n- Mocking the methods being tested\n- Testing mock behavior instead of real functionality\n- Hardcoding expected results without computation\n- Mocking Prisma queries (use test database instead)\n- Suppressing React act() warnings",
        "testStrategy": "",
        "status": "done",
        "dependencies": [],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": 3,
        "title": "Database Schema & Prisma ORM Setup",
        "description": "Implement the complete database schema and Prisma ORM configuration with privacy-focused design, HubSpot integration tracking, and automated data retention compliance. Establish the data foundation that supports all assessment functionality with TDD-compatible testing patterns.",
        "details": "**DATABASE SCHEMA IMPLEMENTATION:**\n\n**Prisma Schema Definition (prisma/schema.prisma):**\n```prisma\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel Assessment {\n  id          String   @id @default(uuid())\n  sessionId   String   @unique\n  \n  // Assessment data\n  responses        Json     // {\"value_assurance_1\": \"A\", \"customer_safe_1\": \"B\", ...}\n  totalScore       Int?     // 0-100 overall score\n  scoreBreakdown   Json?    // {\"valueAssurance\": 75, \"customerSafe\": 80, ...}\n  scoreCategory    String?  // 'champion', 'builder', 'risk_zone', 'alert', 'crisis'\n  recommendations  String[] // Array of recommendation strings\n  \n  // User data (scrubbed after 30 days)\n  email            String?\n  firstName        String?\n  lastName         String?\n  company          String?\n  phone            String?\n  \n  // HubSpot integration tracking\n  hubspotSyncStatus     String  @default(\"pending\") // 'pending', 'synced', 'failed', 'skipped'\n  hubspotSyncAttempts   Int     @default(0)\n  hubspotContactId      String?\n  hubspotDealId         String?\n  hubspotSyncError      String?\n  hubspotSyncedAt       DateTime?\n  \n  // Email delivery tracking\n  emailDeliveryStatus   String  @default(\"pending\") // 'pending', 'sent', 'failed', 'skipped'\n  emailDeliveryAttempts Int     @default(0)\n  emailDeliveredAt      DateTime?\n  emailDeliveryError    String?\n  \n  // Timestamps\n  createdAt       DateTime  @default(now())\n  updatedAt       DateTime  @updatedAt\n  completedAt     DateTime?\n  emailScrubbedAt DateTime?\n  \n  // Analytics fields (preserved after email scrub)\n  completionTimeSeconds Int?\n  browserInfo          Json?\n  referrerSource       String?\n  abTestVariant        String?\n  ipAddressHash        String?\n  leadQuality          String   @default(\"basic\") // 'basic', 'enhanced', 'executive_briefing_qualified'\n  qualifiedForBriefing Boolean  @default(false)\n  \n  // Relations\n  hubspotSyncQueue HubspotSyncQueue[]\n  \n  @@index([sessionId])\n  @@index([email])\n  @@index([createdAt])\n  @@index([hubspotSyncStatus])\n  @@index([createdAt, totalScore, scoreCategory], name: \"analytics_idx\")\n  @@map(\"assessments\")\n}\n\nmodel AssessmentSession {\n  sessionId     String   @id\n  currentStep   Int      @default(0)\n  totalSteps    Int      @default(4)\n  responses     Json     @default(\"{}\")\n  \n  // Progressive data capture\n  email         String?\n  firstName     String?\n  lastName      String?\n  company       String?\n  phone         String?\n  \n  // Session metadata\n  ipAddressHash String?\n  userAgent     String?\n  referrerSource String?\n  abTestVariant String?\n  \n  // Timestamps\n  startedAt     DateTime @default(now())\n  lastActivity  DateTime @default(now())\n  expiresAt     DateTime @default(dbgenerated(\"(CURRENT_TIMESTAMP + INTERVAL '24 hours')\"))\n  \n  @@index([expiresAt])\n  @@index([lastActivity])\n  @@index([ipAddressHash, startedAt])\n  @@map(\"assessment_sessions\")\n}\n\nmodel HubspotSyncQueue {\n  id            String   @id @default(uuid())\n  assessmentId  String\n  \n  // Sync data\n  payload       Json\n  syncType      String   // 'contact', 'deal', 'contact_and_deal'\n  \n  // Retry logic\n  retryCount    Int      @default(0)\n  maxRetries    Int      @default(5)\n  nextRetryAt   DateTime @default(now())\n  retryDelaySeconds Int  @default(60)\n  \n  // Tracking\n  createdAt     DateTime @default(now())\n  lastAttemptAt DateTime?\n  lastError     String?\n  \n  // Success tracking\n  completedAt        DateTime?\n  hubspotContactId   String?\n  hubspotDealId      String?\n  \n  // Relations\n  assessment Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)\n  \n  @@index([nextRetryAt, retryCount])\n  @@index([assessmentId])\n  @@index([createdAt])\n  @@map(\"hubspot_sync_queue\")\n}\n```\n\n**Database Migration Scripts:**\n- Initial migration with all tables, indexes, and constraints\n- Database triggers for automatic timestamp updates\n- Check constraints for enum-like field validation\n- Performance indexes for common query patterns\n- Privacy compliance functions (email scrubbing)\n\n**TDD DATABASE SETUP:**\n- Test database configuration separate from development\n- Database seeding utilities for consistent test scenarios\n- Transaction wrapper for test isolation\n- Test data factories for creating assessment records\n- Mock data generators that respect schema constraints\n\n**Prisma Client Configuration:**\n```typescript\n// lib/prisma.ts\nimport { PrismaClient } from '@prisma/client';\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined;\n};\n\nexport const prisma = globalForPrisma.prisma ?? new PrismaClient({\n  log: process.env.NODE_ENV === 'development' ? ['query', 'error', 'warn'] : ['error']\n});\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma;\n```\n\n**Database Utility Functions:**\n```typescript\n// lib/db-utils.ts\nexport async function createAssessmentSession(data: CreateSessionData): Promise<AssessmentSession> {\n  return await prisma.assessmentSession.create({\n    data: {\n      sessionId: generateSessionId(),\n      ipAddressHash: hashIP(data.ipAddress),\n      userAgent: data.userAgent,\n      referrerSource: data.referrer,\n      abTestVariant: data.abTestVariant\n    }\n  });\n}\n\nexport async function saveAssessmentProgress(sessionId: string, data: ProgressData): Promise<void> {\n  await prisma.assessmentSession.update({\n    where: { sessionId },\n    data: {\n      currentStep: data.step,\n      responses: data.responses,\n      email: data.email,\n      lastActivity: new Date()\n    }\n  });\n}\n```\n\n**Privacy Compliance Implementation:**\n- Automated email scrubbing function (30-day retention)\n- IP address hashing for analytics without storing raw IPs\n- Data purge functions for GDPR compliance\n- Session cleanup for expired assessment sessions\n- PII removal while preserving analytics data\n\n**HubSpot Integration Schema:**\n- Queue system for failed sync retries\n- Exponential backoff retry logic\n- Contact and deal creation tracking\n- Sync status monitoring and error logging\n- Rate limiting compliance with HubSpot API\n\n**Database Performance Optimization:**\n- Strategic indexing for common query patterns\n- JSONB field optimization for assessment responses\n- Connection pooling configuration\n- Query optimization for analytics queries\n- Efficient data retention and cleanup\n\n**Environment Configuration:**\n- Development database setup (local PostgreSQL)\n- Test database configuration (separate instance)\n- Production database configuration (Supabase/Neon)\n- Environment variable management\n- Database connection security\n\n**TDD-READY FEATURES:**\n- Test database reset utilities\n- Transaction-based test isolation\n- Mock data generation respecting schema\n- Database query testing patterns\n- Integration test support for Prisma operations\n\n**TESTING STRATEGY FOR DATABASE:**\n```typescript\n// tests/db/assessment.test.ts\ndescribe('Assessment Database Operations', () => {\n  beforeEach(async () => {\n    await resetTestDatabase();\n  });\n\n  test('should create assessment session with valid data', async () => {\n    const sessionData = createMockSessionData();\n    const session = await createAssessmentSession(sessionData);\n    \n    expect(session.sessionId).toBeDefined();\n    expect(session.currentStep).toBe(0);\n    expect(session.expiresAt).toBeInstanceOf(Date);\n  });\n\n  test('should save assessment progress correctly', async () => {\n    const session = await createTestAssessmentSession();\n    const progressData = {\n      step: 1,\n      responses: { 'value_assurance_1': 'A' },\n      email: 'test@example.com'\n    };\n\n    await saveAssessmentProgress(session.sessionId, progressData);\n    \n    const updated = await prisma.assessmentSession.findUnique({\n      where: { sessionId: session.sessionId }\n    });\n    \n    expect(updated?.currentStep).toBe(1);\n    expect(updated?.email).toBe('test@example.com');\n  });\n});\n```\n\n**KEY FILES TO CREATE:**\n- /prisma/schema.prisma - Complete database schema\n- /prisma/migrations/ - Database migration files\n- /prisma/seed.ts - Database seeding script\n- /prisma/seed-test.ts - Test database seeding\n- /lib/prisma.ts - Prisma client configuration\n- /lib/db-utils.ts - Database utility functions\n- /lib/db-migrations.ts - Migration utilities\n- /tests/db/ - Database test files\n- /.env.example - Updated with database URLs",
        "testStrategy": "",
        "status": "review",
        "dependencies": [],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": 4,
        "title": "HubSpot CRM Integration & API Layer",
        "description": "Build robust HubSpot CRM integration with contact/deal creation, retry queue management, and complete lead qualification engine. Implement resilient API layer that handles HubSpot Free tier limitations (100 requests per 10 seconds) with proper error handling and exponential backoff retry logic.",
        "status": "in-progress",
        "dependencies": [],
        "priority": "high",
        "details": "**HUBSPOT INTEGRATION REQUIREMENTS:**\n\n**HubSpot API Integration Setup:**\n- HubSpot API client configuration using @hubspot/api-client\n- Authentication with HubSpot Access Token\n- Rate limiting compliance (100 requests per 10 seconds for Free tier)\n- Error handling for HubSpot API failures\n- Retry queue with exponential backoff for failed syncs\n\n**Complete Lead Qualification Engine (Tier 1-3 System):**\n```typescript\n// lib/services/lead-qualification.ts\nexport class LeadQualificationService {\n  static qualifyLead(assessmentData: AssessmentData): LeadQualificationResult {\n    const tier = this.determineTier(assessmentData);\n    const qualifiedForBriefing = this.isExecutiveBriefingQualified(assessmentData);\n    \n    return {\n      tier,\n      qualifiedForBriefing,\n      hubspotSyncRequired: tier >= 1, // All tiers sync to HubSpot\n      dealCreationRequired: qualifiedForBriefing\n    };\n  }\n  \n  private static determineTier(data: AssessmentData): number {\n    // Tier 1 (Basic): Email provided → HubSpot contact creation\n    if (data.email) {\n      // Tier 2 (Enhanced): Name + Company → Enhanced contact record  \n      if (data.firstName && data.company) {\n        // Tier 3 (Executive Briefing Qualified): Complete contact OR qualifying criteria\n        if (this.isExecutiveBriefingQualified(data)) {\n          return 3;\n        }\n        return 2;\n      }\n      return 1;\n    }\n    return 0; // No qualification\n  }\n  \n  private static isExecutiveBriefingQualified(data: AssessmentData): boolean {\n    // Complete contact information\n    const hasCompleteContact = data.firstName && data.lastName && data.company && data.phone;\n    \n    // Score-based qualification (needs help)\n    const needsHelp = data.totalScore < 60; // Risk zone, alert, or crisis categories\n    \n    // High-value company indicators\n    const isHighValueCompany = this.checkCompanyValueIndicators(data);\n    \n    // Industry-specific criteria\n    const qualifiesOnIndustry = this.checkIndustryQualification(data);\n    \n    return hasCompleteContact || needsHelp || isHighValueCompany || qualifiesOnIndustry;\n  }\n  \n  private static checkCompanyValueIndicators(data: AssessmentData): boolean {\n    // Company size indicators (from company name or additional data)\n    const largeCompanyKeywords = ['Corp', 'Corporation', 'Inc', 'LLC', 'Ltd', 'Group', 'Holdings'];\n    const hasLargeCompanyIndicator = largeCompanyKeywords.some(keyword => \n      data.company?.toLowerCase().includes(keyword.toLowerCase())\n    );\n    \n    // Critical customer safety issues (high-value signal)\n    const hasCriticalCustomerSafetyIssues = data.scoreBreakdown.customerSafe < 50;\n    \n    return hasLargeCompanyIndicator || hasCriticalCustomerSafetyIssues;\n  }\n  \n  private static checkIndustryQualification(data: AssessmentData): boolean {\n    // High-value industries (could be enhanced with industry detection)\n    const highValueIndustries = ['finance', 'banking', 'healthcare', 'technology', 'manufacturing'];\n    \n    // This could be enhanced with more sophisticated industry detection\n    // For now, based on company name patterns or future industry selection\n    return highValueIndustries.some(industry => \n      data.company?.toLowerCase().includes(industry)\n    );\n  }\n}\n```\n\n**HubSpot Sync Payload Implementation (per api-specification.md):**\n```typescript\n// lib/services/hubspot.ts\nexport class HubSpotService {\n  private client: Client;\n  \n  async createOrUpdateContact(assessmentData: AssessmentData): Promise<HubSpotResult> {\n    const qualification = LeadQualificationService.qualifyLead(assessmentData);\n    \n    const hubspotPayload: HubSpotSyncPayload = {\n      email: assessmentData.email,\n      properties: {\n        // Standard contact properties\n        firstname: assessmentData.firstName,\n        lastname: assessmentData.lastName,\n        company: assessmentData.company,\n        phone: assessmentData.phone,\n        \n        // Custom AI assessment properties (max 10 for Free tier)\n        ai_assessment_score: assessmentData.totalScore,\n        ai_assessment_category: assessmentData.scoreCategory,\n        ai_value_score: assessmentData.scoreBreakdown.valueAssurance,\n        ai_customer_score: assessmentData.scoreBreakdown.customerSafe,\n        ai_risk_score: assessmentData.scoreBreakdown.riskCompliance,\n        ai_governance_score: assessmentData.scoreBreakdown.governance,\n        ai_assessment_date: assessmentData.completedAt.toISOString().split('T')[0],\n        ai_completion_time: assessmentData.completionTime,\n        ai_lead_quality: this.getLeadQualityLabel(qualification.tier),\n        lead_source: 'AI Reality Check Scorecard'\n      }\n    };\n    \n    const contactResult = await this.client.crm.contacts.basicApi.create({\n      properties: hubspotPayload.properties,\n      associations: []\n    });\n    \n    // Create deal for Executive Briefing qualified leads\n    if (qualification.qualifiedForBriefing) {\n      await this.createExecutiveBriefingDeal(contactResult.id, assessmentData);\n    }\n    \n    return { success: true, contactId: contactResult.id };\n  }\n  \n  private getLeadQualityLabel(tier: number): string {\n    switch (tier) {\n      case 1: return 'basic';\n      case 2: return 'enhanced';\n      case 3: return 'executive_briefing_qualified';\n      default: return 'unqualified';\n    }\n  }\n  \n  private async createExecutiveBriefingDeal(contactId: string, data: AssessmentData): Promise<void> {\n    const dealPayload: HubSpotDealPayload = {\n      properties: {\n        dealname: `AI Reality Check - ${data.firstName} ${data.lastName} (${data.company})`,\n        dealstage: 'executive_briefing_requested',\n        amount: '5000', // Estimated consulting value\n        pipeline: 'ai_consulting_pipeline',\n        closedate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(), // 30 days from now\n        ai_assessment_score: data.totalScore\n      },\n      associations: [{\n        to: { id: contactId },\n        types: [{ associationCategory: 'HUBSPOT_DEFINED', associationTypeId: 3 }]\n      }]\n    };\n    \n    await this.client.crm.deals.basicApi.create(dealPayload);\n  }\n}\n```\n\n**Executive Briefing Qualification Thresholds:**\n1. **Complete Contact Information:** All fields (firstName, lastName, company, phone) provided\n2. **Score-Based Qualification:** Total score < 60 (Risk Zone, Alert, or Crisis categories)\n3. **Industry/Company Size Criteria:**\n   - Large company indicators (Corp, Inc, LLC patterns)\n   - High-value industries (finance, healthcare, technology, manufacturing)\n   - Critical customer safety scores < 50 (indicates immediate need)\n\n**Retry Queue Implementation:**\n- HubspotSyncQueue table management\n- Exponential backoff retry logic (60s, 300s, 900s, 1800s, 3600s)\n- Maximum retry attempts (5) before marking as permanently failed\n- Background job processing for queued syncs\n- Dead letter queue for permanently failed syncs\n\n**API Endpoints for HubSpot Integration:**\n```typescript\n// app/api/hubspot/contact/route.ts\nexport async function POST(request: NextRequest) {\n  const hubspotService = new HubSpotService();\n  const qualificationService = new LeadQualificationService();\n  \n  try {\n    const assessmentData = await request.json();\n    const qualification = qualificationService.qualifyLead(assessmentData);\n    \n    if (qualification.hubspotSyncRequired) {\n      const result = await hubspotService.createOrUpdateContact(assessmentData);\n      return NextResponse.json({ \n        success: true, \n        contactId: result.contactId,\n        qualification: qualification\n      });\n    }\n    \n    return NextResponse.json({ \n      success: true, \n      skipped: true,\n      reason: 'Insufficient qualification for HubSpot sync'\n    });\n  } catch (error) {\n    // Queue for retry if HubSpot API fails\n    await queueHubSpotSync(assessmentData);\n    throw new APIError('HUBSPOT_SYNC_FAILED', error.message, 500);\n  }\n}\n```\n\n**Rate Limiting & API Compliance:**\n- Request throttling to stay within HubSpot Free tier limits\n- Batch processing capabilities for multiple contacts\n- API response monitoring and error categorization\n- Automatic retry delay calculation based on rate limit headers\n\n**TDD IMPLEMENTATION APPROACH:**\n\n**RED Phase - Write Failing Tests:**\n```typescript\n// tests/services/lead-qualification.test.ts\ndescribe('Lead Qualification Service', () => {\n  test('should qualify as Tier 1 with email only', () => {\n    const assessment = createMockAssessmentData({ email: 'test@company.com' });\n    const result = LeadQualificationService.qualifyLead(assessment);\n    \n    expect(result.tier).toBe(1);\n    expect(result.hubspotSyncRequired).toBe(true);\n    expect(result.qualifiedForBriefing).toBe(false);\n  });\n  \n  test('should qualify as Tier 3 for executive briefing when score < 60', () => {\n    const lowScoreAssessment = createMockAssessmentData({ \n      email: 'ceo@company.com',\n      firstName: 'John',\n      totalScore: 45 \n    });\n    \n    const result = LeadQualificationService.qualifyLead(lowScoreAssessment);\n    \n    expect(result.tier).toBe(3);\n    expect(result.qualifiedForBriefing).toBe(true);\n    expect(result.dealCreationRequired).toBe(true);\n  });\n  \n  test('should qualify for executive briefing with complete contact info', () => {\n    const completeContact = createMockAssessmentData({\n      email: 'ceo@company.com',\n      firstName: 'John',\n      lastName: 'Doe',\n      company: 'Acme Corp',\n      phone: '+1-555-123-4567',\n      totalScore: 75\n    });\n    \n    const result = LeadQualificationService.qualifyLead(completeContact);\n    \n    expect(result.qualifiedForBriefing).toBe(true);\n  });\n\n  test('should qualify high-value company with critical customer safety issues', () => {\n    const criticalSafetyAssessment = createMockAssessmentData({\n      email: 'cto@techcorp.com',\n      company: 'TechCorp',\n      scoreBreakdown: { customerSafe: 40 }\n    });\n    \n    const result = LeadQualificationService.qualifyLead(criticalSafetyAssessment);\n    \n    expect(result.qualifiedForBriefing).toBe(true);\n  });\n});\n\n// tests/services/hubspot.test.ts\ndescribe('HubSpot Integration Service', () => {\n  test('should create contact with proper lead quality classification', async () => {\n    const tierTwoAssessment = createMockAssessmentData({\n      email: 'manager@company.com',\n      firstName: 'Jane',\n      company: 'Company Inc'\n    });\n    \n    const hubspotService = new HubSpotService();\n    const result = await hubspotService.createOrUpdateContact(tierTwoAssessment);\n    \n    expect(result.success).toBe(true);\n    expect(mockHubSpotClient.create).toHaveBeenCalledWith(\n      expect.objectContaining({\n        properties: expect.objectContaining({\n          ai_lead_quality: 'enhanced'\n        })\n      })\n    );\n  });\n  \n  test('should create deal for executive briefing qualified leads', async () => {\n    const qualifiedAssessment = createMockAssessmentData({ \n      totalScore: 45, // Triggers briefing qualification\n      firstName: 'John',\n      lastName: 'Doe',\n      company: 'Acme Corp'\n    });\n    \n    const hubspotService = new HubSpotService();\n    await hubspotService.createOrUpdateContact(qualifiedAssessment);\n    \n    expect(mockHubSpotClient.deals.create).toHaveBeenCalledWith(\n      expect.objectContaining({\n        properties: expect.objectContaining({\n          dealname: 'AI Reality Check - John Doe (Acme Corp)',\n          dealstage: 'executive_briefing_requested'\n        })\n      })\n    );\n  });\n});\n```\n\n**GREEN Phase - Minimal Implementation:**\n- Basic HubSpot client setup with authentication\n- Tier-based lead qualification logic\n- Contact creation with proper custom properties\n- Executive briefing deal creation for qualified leads\n- Database queue insertion for failures\n\n**REFACTOR Phase - Production Ready:**\n- Comprehensive error handling and categorization\n- Proper rate limiting and throttling\n- Exponential backoff retry logic\n- Performance optimizations and batch processing\n- Monitoring and alerting integration\n\n**KEY FILES TO CREATE:**\n- /lib/services/hubspot.ts - Core HubSpot integration service\n- /lib/services/lead-qualification.ts - Complete Tier 1-3 qualification engine\n- /lib/services/hubspot-retry.ts - Retry queue processing\n- /lib/errors/hubspot-errors.ts - HubSpot-specific error handling\n- /app/api/hubspot/contact/route.ts - Contact creation API\n- /app/api/hubspot/deal/route.ts - Deal creation API\n- /app/api/hubspot/sync-queue/route.ts - Retry queue management\n- /tests/services/lead-qualification.test.ts - Lead qualification tests\n- /tests/services/hubspot.test.ts - HubSpot service tests\n- /tests/api/hubspot.test.ts - HubSpot API endpoint tests\n- /lib/utils/rate-limiter.ts - Rate limiting utilities",
        "testStrategy": "Comprehensive TDD approach with unit tests for lead qualification engine (80%+ coverage), integration tests for HubSpot API interactions, and end-to-end tests for complete sync workflows. Mock HubSpot API responses for deterministic testing. Test all qualification tiers and executive briefing scenarios.",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "Assessment Content & Scoring Engine",
        "description": "Implement the complete 16-question assessment content with weighted scoring algorithm that evaluates AI readiness across 4 critical areas. Build the scoring engine that converts responses to actionable insights with proper categorization and recommendation generation.",
        "status": "pending",
        "dependencies": [],
        "priority": "high",
        "details": "**ASSESSMENT CONTENT IMPLEMENTATION:**\n\n**Reference Implementation Specification:**\n- Primary source: /workspaces/ai-scorecard/implementation-spec/assessment-content.md\n- Contains ALL 16 questions with complete text, options, and point values\n- Includes definitive scoring weights and category thresholds\n- Specifies personalized recommendation engine requirements\n\n**Assessment Structure Definition:**\n- 16 total questions across 4 critical areas\n- 4 questions per area with 5-option multiple choice (A-E)\n- Point scale: 25, 15, 10, 5, 0 points per question\n- **Confirmed Area Weights:** AI Value Assurance (25%), Customer-Safe AI (35%), Model Risk & Compliance (25%), Implementation Governance (15%)\n\n**Question Data Structure:**\n```typescript\n// types/assessment.ts\ninterface AssessmentQuestion {\n  id: string;                    // e.g., \"value_assurance_1\"\n  area: AssessmentArea;          // \"value_assurance\" | \"customer_safe\" | \"risk_compliance\" | \"governance\"\n  title: string;                 // Question title\n  question: string;              // Full question text\n  options: {\n    A: { text: string; points: number };\n    B: { text: string; points: number };\n    C: { text: string; points: number };\n    D: { text: string; points: number };\n    E: { text: string; points: number };\n  };\n  weight: number;                // Area weight percentage\n}\n\ninterface AssessmentArea {\n  id: string;\n  title: string;\n  description: string;\n  weight: number;\n  questionCount: number;\n}\n```\n\n**Complete Question Set Implementation:**\n```typescript\n// data/assessment-questions.ts\n// IMPORTANT: Source all 16 questions from /workspaces/ai-scorecard/implementation-spec/assessment-content.md\n// DO NOT hardcode questions - import from specification file\n\nexport const ASSESSMENT_AREAS: AssessmentArea[] = [\n  {\n    id: 'value_assurance',\n    title: 'AI Value Assurance',\n    description: 'Evaluates spend controls, KPIs, and ROI measurement',\n    weight: 0.25,\n    questionCount: 4\n  },\n  {\n    id: 'customer_safe',\n    title: 'Customer-Safe AI',\n    description: 'Assesses reliability for customer-facing AI systems',\n    weight: 0.35,\n    questionCount: 4\n  },\n  {\n    id: 'risk_compliance',\n    title: 'Model Risk & Compliance',\n    description: 'Reviews regulation readiness and model validation',\n    weight: 0.25,\n    questionCount: 4\n  },\n  {\n    id: 'governance',\n    title: 'Implementation Governance',\n    description: 'Evaluates AI implementation processes and controls',\n    weight: 0.15,\n    questionCount: 4\n  }\n];\n\n// Load questions from specification file\nexport const ASSESSMENT_QUESTIONS: AssessmentQuestion[] = loadQuestionsFromSpec(\n  '/workspaces/ai-scorecard/implementation-spec/assessment-content.md'\n);\n```\n\n**Scoring Algorithm Implementation:**\n```typescript\n// lib/scoring/assessment-scoring.ts\nexport interface ScoringResult {\n  totalScore: number;           // 0-100 overall score\n  scoreBreakdown: {\n    valueAssurance: number;     // 0-100 for this area\n    customerSafe: number;       // 0-100 for this area\n    riskCompliance: number;     // 0-100 for this area\n    governance: number;         // 0-100 for this area\n  };\n  scoreCategory: ScoreCategory;\n  recommendations: string[];\n  areaInsights: AreaInsight[];\n  personalizedRecommendations: PersonalizedRecommendation[];\n}\n\nexport function calculateAssessmentScore(\n  responses: Record<string, string>,\n  userProfile?: UserProfile\n): ScoringResult {\n  const areaScores = calculateAreaScores(responses);\n  const totalScore = calculateWeightedTotal(areaScores);\n  const scoreCategory = determineScoreCategory(totalScore, areaScores);\n  const recommendations = generateRecommendations(scoreCategory, areaScores);\n  const areaInsights = generateAreaInsights(areaScores);\n  const personalizedRecommendations = generatePersonalizedRecommendations(\n    scoreCategory, \n    areaScores, \n    userProfile\n  );\n\n  return {\n    totalScore,\n    scoreBreakdown: areaScores,\n    scoreCategory,\n    recommendations,\n    areaInsights,\n    personalizedRecommendations\n  };\n}\n\nfunction calculateWeightedTotal(areaScores: ScoreBreakdown): number {\n  return Math.round(\n    (areaScores.valueAssurance * 0.25) +\n    (areaScores.customerSafe * 0.35) +\n    (areaScores.riskCompliance * 0.25) +\n    (areaScores.governance * 0.15)\n  );\n}\n```\n\n**Score Categorization Logic (from specification):**\n```typescript\n// lib/scoring/score-categories.ts\nexport type ScoreCategory = 'champion' | 'builder' | 'risk_zone' | 'alert' | 'crisis';\n\nexport function determineScoreCategory(\n  totalScore: number, \n  areaScores: ScoreBreakdown\n): ScoreCategory {\n  // Load thresholds from /workspaces/ai-scorecard/implementation-spec/assessment-content.md\n  const thresholds = loadScoringThresholds();\n  \n  // Crisis: Customer-Safe AI below critical threshold (immediate risk)\n  if (areaScores.customerSafe < thresholds.crisis.customerSafe) {\n    return 'crisis';\n  }\n  \n  // Champion: High total score with no weak areas\n  if (totalScore >= thresholds.champion.total && \n      Object.values(areaScores).every(score => score >= thresholds.champion.minArea)) {\n    return 'champion';\n  }\n  \n  // Additional logic from specification file...\n  return determineFromThresholds(totalScore, areaScores, thresholds);\n}\n```\n\n**Personalized Recommendation Engine:**\n```typescript\n// lib/scoring/personalized-recommendations.ts\nexport interface PersonalizedRecommendation {\n  priority: 'immediate' | 'high' | 'medium' | 'low';\n  category: string;\n  title: string;\n  description: string;\n  timeframe: string;\n  resources: string[];\n  roleSpecific: boolean;\n}\n\nexport function generatePersonalizedRecommendations(\n  category: ScoreCategory,\n  areaScores: ScoreBreakdown,\n  userProfile?: UserProfile\n): PersonalizedRecommendation[] {\n  const recommendations: PersonalizedRecommendation[] = [];\n  \n  // Role-specific recommendations\n  if (userProfile?.role) {\n    recommendations.push(...getRoleSpecificRecommendations(userProfile.role, areaScores));\n  }\n  \n  // Industry-specific recommendations\n  if (userProfile?.industry) {\n    recommendations.push(...getIndustrySpecificRecommendations(userProfile.industry, areaScores));\n  }\n  \n  // Company size-specific recommendations\n  if (userProfile?.companySize) {\n    recommendations.push(...getCompanySizeRecommendations(userProfile.companySize, areaScores));\n  }\n  \n  return prioritizeRecommendations(recommendations, category, areaScores);\n}\n```\n\n**TDD IMPLEMENTATION APPROACH:**\n\n**RED Phase - Write Failing Tests:**\n```typescript\n// tests/scoring/assessment-scoring.test.ts\ndescribe('Assessment Scoring Engine', () => {\n  test('should apply exact weights from specification', () => {\n    const responses = createMixedScoreResponses();\n    const result = calculateAssessmentScore(responses);\n    \n    // Verify weighted calculation: (VA*0.25 + CS*0.35 + RC*0.25 + IG*0.15)\n    const expectedTotal = \n      (result.scoreBreakdown.valueAssurance * 0.25) +\n      (result.scoreBreakdown.customerSafe * 0.35) +\n      (result.scoreBreakdown.riskCompliance * 0.25) +\n      (result.scoreBreakdown.governance * 0.15);\n    \n    expect(result.totalScore).toBe(Math.round(expectedTotal));\n  });\n\n  test('should load questions from specification file', () => {\n    expect(ASSESSMENT_QUESTIONS).toHaveLength(16);\n    expect(ASSESSMENT_QUESTIONS.filter(q => q.area === 'customer_safe')).toHaveLength(4);\n    \n    // Verify questions match specification format\n    ASSESSMENT_QUESTIONS.forEach(question => {\n      expect(question).toHaveProperty('id');\n      expect(question).toHaveProperty('options.A.points');\n      expect(question.options.A.points).toBeGreaterThanOrEqual(0);\n    });\n  });\n\n  test('should generate personalized recommendations', () => {\n    const responses = createTestResponses();\n    const userProfile = { role: 'CTO', industry: 'fintech', companySize: 'enterprise' };\n    \n    const result = calculateAssessmentScore(responses, userProfile);\n    \n    expect(result.personalizedRecommendations).toBeDefined();\n    expect(result.personalizedRecommendations.length).toBeGreaterThan(0);\n    expect(result.personalizedRecommendations.some(r => r.roleSpecific)).toBe(true);\n  });\n});\n```\n\n**GREEN Phase - Specification-Driven Implementation:**\n- Load all content from /workspaces/ai-scorecard/implementation-spec/assessment-content.md\n- Implement exact scoring weights and thresholds from specification\n- Build basic personalized recommendation engine\n- Core weighted average calculation with specified weights\n\n**REFACTOR Phase - Production Ready:**\n- Advanced personalized recommendation algorithms\n- Performance optimization for real-time scoring\n- Comprehensive edge case handling\n- Enhanced user profiling and recommendation relevance\n\n**KEY FILES TO CREATE:**\n- /lib/content/spec-loader.ts - Load content from implementation specification\n- /data/assessment-questions.ts - Questions loaded from specification file\n- /lib/scoring/assessment-scoring.ts - Core scoring with exact weights (25/35/25/15)\n- /lib/scoring/score-categories.ts - Categorization from specification thresholds\n- /lib/scoring/personalized-recommendations.ts - Role/industry-specific recommendations\n- /types/assessment.ts - TypeScript interfaces for assessment data\n- /tests/scoring/ - Tests validating specification compliance\n- /data/scoring-fixtures.ts - Test data matching specification format",
        "testStrategy": "TDD approach with specification-driven testing: 1) RED phase tests loading content from implementation-spec/assessment-content.md, 2) Validate exact scoring weights (25/35/25/15), 3) Test personalized recommendation generation, 4) Verify category thresholds from specification, 5) GREEN phase implements minimal passing functionality, 6) REFACTOR phase adds production-ready features while maintaining specification compliance.",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "Assessment Step 1 UI - AI Value Assurance",
        "description": "Build the first assessment step focusing on AI Value Assurance questions with progressive data capture, auto-save functionality, and mobile-first responsive design. Implement TDD approach for React components with proper form validation and user experience optimizations, specifically targeting 40%+ executive mobile users.",
        "status": "pending",
        "dependencies": [],
        "priority": "medium",
        "details": "**STEP 1 UI IMPLEMENTATION:**\n\n**Assessment Step 1 Focus - AI Value Assurance (25% weight):**\n- 4 questions covering ROI tracking, budget management, success metrics, and value realization\n- Progressive email capture option (not required)\n- Auto-save responses to session storage\n- Mobile-first design prioritizing 40%+ executive mobile users\n- Clear progress indication and navigation\n\n**MOBILE-FIRST IMPLEMENTATION REQUIREMENTS:**\n- Reference /workspaces/ai-scorecard/implementation-spec/user-experience-flow.md for:\n  - Progressive capture implementation details\n  - Email validation patterns and error handling\n  - Mobile breakpoint specifications and touch optimization\n- Touch-optimized interface with minimum 44px touch targets for executive users\n- Mobile-first CSS with specific breakpoints for mobile (320px-768px), tablet (768px-1024px), desktop (1024px+)\n- Executive-appropriate typography scaling and spacing for mobile readability\n- Performance-optimized loading for mobile devices\n\n**React Component Architecture:**\n```typescript\n// app/assessment/step/[step]/page.tsx\ninterface AssessmentStepProps {\n  params: { step: string };\n}\n\nexport default function AssessmentStep({ params }: AssessmentStepProps) {\n  const stepNumber = parseInt(params.step);\n  const stepConfig = ASSESSMENT_STEPS[stepNumber - 1];\n  \n  return (\n    <AssessmentLayout currentStep={stepNumber}>\n      <StepContainer stepConfig={stepConfig} />\n    </AssessmentLayout>\n  );\n}\n\n// components/assessment/StepContainer.tsx\ninterface StepContainerProps {\n  stepConfig: AssessmentStepConfig;\n}\n\nexport function StepContainer({ stepConfig }: StepContainerProps) {\n  const { state, dispatch } = useAssessment();\n  const [isLoading, setIsLoading] = useState(false);\n  \n  return (\n    <div className=\"assessment-step mobile-optimized\">\n      <ProgressIndicator current={stepConfig.stepNumber} total={4} />\n      <StepHeader title={stepConfig.title} description={stepConfig.description} />\n      <QuestionForm \n        questions={stepConfig.questions}\n        responses={state.responses}\n        onResponseChange={handleResponseChange}\n        onEmailCapture={handleEmailCapture}\n      />\n      <StepNavigation \n        canProceed={canProceedToNext}\n        onNext={handleNext}\n        onPrevious={handlePrevious}\n      />\n    </div>\n  );\n}\n```\n\n**Mobile-First Question Component Implementation:**\n```typescript\n// components/assessment/Question.tsx\ninterface QuestionProps {\n  question: AssessmentQuestion;\n  value?: string;\n  onChange: (questionId: string, value: string) => void;\n  autoFocus?: boolean;\n}\n\nexport function Question({ question, value, onChange, autoFocus }: QuestionProps) {\n  const [selectedOption, setSelectedOption] = useState<string | undefined>(value);\n  \n  const handleOptionSelect = (optionKey: string) => {\n    setSelectedOption(optionKey);\n    onChange(question.id, optionKey);\n  };\n\n  return (\n    <div className=\"question-container mb-6 md:mb-8 mobile-first\">\n      <h3 className=\"text-lg md:text-xl font-semibold text-gray-900 mb-3 md:mb-4 leading-tight\">\n        {question.title}\n      </h3>\n      <p className=\"text-base md:text-lg text-gray-700 mb-4 md:mb-6 leading-relaxed\">\n        {question.question}\n      </p>\n      \n      <div className=\"options-grid space-y-2 md:space-y-3\">\n        {Object.entries(question.options).map(([key, option]) => (\n          <OptionButton\n            key={key}\n            optionKey={key}\n            option={option}\n            isSelected={selectedOption === key}\n            onSelect={() => handleOptionSelect(key)}\n            autoFocus={autoFocus && key === 'A'}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\n// components/assessment/OptionButton.tsx - Mobile-First Touch Optimization\ninterface OptionButtonProps {\n  optionKey: string;\n  option: { text: string; points: number };\n  isSelected: boolean;\n  onSelect: () => void;\n  autoFocus?: boolean;\n}\n\nexport function OptionButton({ optionKey, option, isSelected, onSelect, autoFocus }: OptionButtonProps) {\n  return (\n    <button\n      className={cn(\n        \"option-button w-full p-3 md:p-4 text-left rounded-lg border-2 transition-all duration-200\",\n        \"min-h-[44px] touch-manipulation\", // Mobile touch optimization\n        \"text-sm md:text-base leading-relaxed\", // Mobile-first typography\n        isSelected \n          ? \"border-blue-500 bg-blue-50 text-blue-900\" \n          : \"border-gray-200 bg-white hover:border-gray-300 hover:bg-gray-50 active:bg-gray-100\"\n      )}\n      onClick={onSelect}\n      autoFocus={autoFocus}\n    >\n      <div className=\"flex items-start gap-2 md:gap-3\">\n        <span className=\"option-key font-bold text-base md:text-lg text-blue-600 mt-0.5 md:mt-1 flex-shrink-0\">\n          {optionKey})\n        </span>\n        <span className=\"option-text text-gray-800 leading-relaxed flex-1\">\n          {option.text}\n        </span>\n      </div>\n    </button>\n  );\n}\n```\n\n**Progressive Email Capture (per user-experience-flow.md):**\n```typescript\n// components/assessment/EmailCapture.tsx\ninterface EmailCaptureProps {\n  currentEmail?: string;\n  onEmailSubmit: (email: string) => void;\n  showIncentive?: boolean;\n}\n\nexport function EmailCapture({ currentEmail, onEmailSubmit, showIncentive }: EmailCaptureProps) {\n  const [email, setEmail] = useState(currentEmail || '');\n  const [isVisible, setIsVisible] = useState(!currentEmail);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [validationError, setValidationError] = useState<string | null>(null);\n\n  // Email validation per user-experience-flow.md specifications\n  const validateEmail = (email: string): string | null => {\n    if (!email) return null;\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(email)) {\n      return \"Please enter a valid business email address\";\n    }\n    return null;\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    const error = validateEmail(email);\n    \n    if (error) {\n      setValidationError(error);\n      return;\n    }\n    \n    setIsSubmitting(true);\n    setValidationError(null);\n    \n    try {\n      await onEmailSubmit(email);\n      setIsVisible(false);\n    } catch (error) {\n      console.error('Email submission failed:', error);\n      setValidationError('Failed to save email. Please try again.');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  if (!isVisible) return null;\n\n  return (\n    <div className=\"email-capture bg-gradient-to-r from-blue-50 to-indigo-50 p-4 md:p-6 rounded-lg border border-blue-200 mb-4 md:mb-6\">\n      <div className=\"flex items-start gap-3 md:gap-4\">\n        <div className=\"text-blue-600 text-xl md:text-2xl flex-shrink-0\">📧</div>\n        <div className=\"flex-1 min-w-0\">\n          <h4 className=\"font-semibold text-gray-900 mb-2 text-sm md:text-base\">\n            Get your personalized results via email\n          </h4>\n          <p className=\"text-gray-600 text-xs md:text-sm mb-3 md:mb-4 leading-relaxed\">\n            {showIncentive \n              ? \"Enter your email to receive detailed recommendations and action items.\"\n              : \"Optional: Receive your complete results and improvement recommendations.\"\n            }\n          </p>\n          \n          <form onSubmit={handleSubmit} className=\"space-y-2\">\n            <div className=\"flex flex-col sm:flex-row gap-2\">\n              <input\n                type=\"email\"\n                value={email}\n                onChange={(e) => {\n                  setEmail(e.target.value);\n                  if (validationError) setValidationError(null);\n                }}\n                placeholder=\"your.email@company.com\"\n                className={cn(\n                  \"flex-1 px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\",\n                  \"min-h-[44px] text-base\", // Mobile touch optimization\n                  validationError ? \"border-red-300\" : \"border-gray-300\"\n                )}\n                disabled={isSubmitting}\n              />\n              <button\n                type=\"submit\"\n                disabled={!email || isSubmitting}\n                className=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 min-h-[44px] whitespace-nowrap\"\n              >\n                {isSubmitting ? 'Saving...' : 'Save'}\n              </button>\n            </div>\n            {validationError && (\n              <p className=\"text-red-600 text-xs md:text-sm\">{validationError}</p>\n            )}\n          </form>\n        </div>\n        \n        <button\n          onClick={() => setIsVisible(false)}\n          className=\"text-gray-400 hover:text-gray-600 text-lg md:text-xl min-h-[44px] min-w-[44px] flex items-center justify-center\"\n        >\n          ×\n        </button>\n      </div>\n    </div>\n  );\n}\n```\n\n**Mobile-First Auto-Save Implementation:**\n```typescript\n// hooks/useAutoSave.ts\nexport function useAutoSave(\n  sessionId: string,\n  currentStep: number,\n  responses: Record<string, string>,\n  email?: string\n) {\n  const [isSaving, setIsSaving] = useState(false);\n  const [lastSaved, setLastSaved] = useState<Date | null>(null);\n  const [isOnline, setIsOnline] = useState(navigator.onLine);\n  \n  // Handle offline/online for mobile users\n  useEffect(() => {\n    const handleOnline = () => setIsOnline(true);\n    const handleOffline = () => setIsOnline(false);\n    \n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n    \n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }, []);\n  \n  const saveProgress = useCallback(async () => {\n    if (!sessionId || !isOnline) return;\n    \n    setIsSaving(true);\n    try {\n      await fetch('/api/assessment/save-progress', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          step: currentStep,\n          responses,\n          email,\n          timeSpent: Math.floor((Date.now() - startTime) / 1000),\n          userAgent: navigator.userAgent // For mobile analytics\n        })\n      });\n      \n      setLastSaved(new Date());\n    } catch (error) {\n      console.error('Auto-save failed:', error);\n    } finally {\n      setIsSaving(false);\n    }\n  }, [sessionId, currentStep, responses, email, isOnline]);\n\n  // Auto-save on response changes (debounced for mobile performance)\n  useEffect(() => {\n    const timer = setTimeout(saveProgress, 3000); // Longer delay for mobile\n    return () => clearTimeout(timer);\n  }, [responses, email]);\n\n  // Save on page unload/visibility change (mobile focus handling)\n  useEffect(() => {\n    const handleBeforeUnload = () => {\n      saveProgress();\n    };\n    \n    const handleVisibilityChange = () => {\n      if (document.visibilityState === 'hidden') {\n        saveProgress();\n      }\n    };\n    \n    window.addEventListener('beforeunload', handleBeforeUnload);\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n    \n    return () => {\n      window.removeEventListener('beforeunload', handleBeforeUnload);\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\n    };\n  }, [saveProgress]);\n\n  return { isSaving, lastSaved, isOnline };\n}\n```\n\n**MOBILE-FIRST TDD IMPLEMENTATION APPROACH:**\n\n**RED Phase - Mobile-First Failing Tests:**\n```typescript\n// tests/components/assessment/Question.mobile.test.tsx\ndescribe('Question Component - Mobile First', () => {\n  test('should render with mobile-optimized touch targets (min 44px)', () => {\n    const mockQuestion = createMockQuestion('value_assurance_1');\n    \n    render(\n      <Question \n        question={mockQuestion}\n        onChange={jest.fn()}\n      />\n    );\n    \n    const optionButtons = screen.getAllByRole('button');\n    optionButtons.forEach(button => {\n      expect(button).toHaveStyle('min-height: 44px');\n    });\n  });\n\n  test('should use mobile-first responsive typography', () => {\n    const mockQuestion = createMockQuestion('value_assurance_1');\n    \n    render(\n      <Question \n        question={mockQuestion}\n        onChange={jest.fn()}\n      />\n    );\n    \n    const questionTitle = screen.getByRole('heading', { level: 3 });\n    expect(questionTitle).toHaveClass('text-lg', 'md:text-xl');\n  });\n\n  test('should handle touch events properly on mobile', async () => {\n    const mockQuestion = createMockQuestion('value_assurance_1');\n    const mockOnChange = jest.fn();\n    \n    render(\n      <Question \n        question={mockQuestion}\n        onChange={mockOnChange}\n      />\n    );\n    \n    const optionButton = screen.getByRole('button', { name: /option A/i });\n    \n    // Simulate touch interaction\n    fireEvent.touchStart(optionButton);\n    fireEvent.touchEnd(optionButton);\n    \n    expect(mockOnChange).toHaveBeenCalledWith('value_assurance_1', 'A');\n  });\n});\n\n// tests/components/assessment/EmailCapture.mobile.test.tsx\ndescribe('EmailCapture Component - Mobile Validation', () => {\n  test('should validate email per user-experience-flow.md specs', async () => {\n    const mockOnSubmit = jest.fn();\n    \n    render(<EmailCapture onEmailSubmit={mockOnSubmit} />);\n    \n    await user.type(screen.getByPlaceholderText(/email/i), 'invalid-email');\n    await user.click(screen.getByRole('button', { name: /save/i }));\n    \n    expect(screen.getByText(/valid business email/i)).toBeInTheDocument();\n    expect(mockOnSubmit).not.toHaveBeenCalled();\n  });\n\n  test('should have mobile-optimized input height (44px)', () => {\n    render(<EmailCapture onEmailSubmit={jest.fn()} />);\n    \n    const emailInput = screen.getByPlaceholderText(/email/i);\n    expect(emailInput).toHaveClass('min-h-[44px]');\n  });\n});\n```\n\n**MOBILE-SPECIFIC REQUIREMENTS:**\n- Implement viewport meta tag optimization for mobile scaling\n- Use CSS Grid/Flexbox for responsive layouts per mobile breakpoints\n- Implement touch-friendly hover states and active states\n- Optimize images and assets for mobile loading performance\n- Include mobile-specific error handling and offline support\n- Follow executive mobile UX patterns (larger text, simplified interactions)\n\n**KEY FILES TO CREATE (Mobile-First Focus):**\n- /app/assessment/step/[step]/page.tsx - Mobile-optimized dynamic step routing\n- /components/assessment/StepContainer.tsx - Mobile-first step layout wrapper\n- /components/assessment/Question.tsx - Touch-optimized question component\n- /components/assessment/OptionButton.tsx - Mobile-first option selection\n- /components/assessment/EmailCapture.tsx - Mobile-validated email capture\n- /components/assessment/ProgressIndicator.tsx - Mobile progress bar\n- /components/assessment/StepNavigation.tsx - Touch-friendly navigation\n- /hooks/useAutoSave.ts - Mobile-optimized auto-save with offline support\n- /tests/components/assessment/ - Mobile-first component tests\n- /styles/assessment-mobile.css - Mobile-first assessment styles",
        "testStrategy": "Mobile-first TDD approach with executive user focus: 1) RED phase - Write failing tests for mobile touch optimization (44px targets), responsive typography, and email validation per user-experience-flow.md specs, 2) Test mobile-specific user interactions and offline scenarios, 3) GREEN phase - Implement minimal mobile-first components with basic functionality, 4) REFACTOR phase - Enhance with executive-friendly UX patterns, performance optimization for mobile, and accessibility compliance, 5) Cross-device testing on actual mobile devices used by executives",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "Assessment Step 2 UI - Customer-Safe AI",
        "description": "Build the second assessment step focusing on Customer-Safe AI questions (35% weight - highest priority area). Implement enhanced progressive data capture, advanced auto-save with conflict resolution, and executive-friendly UX patterns with TDD methodology.",
        "status": "pending",
        "dependencies": [],
        "priority": "high",
        "details": "**STEP 2 UI IMPLEMENTATION:**\n\n**Assessment Step 2 Focus - Customer-Safe AI (35% weight - HIGHEST PRIORITY):**\n- 4 critical questions covering accuracy monitoring, failure handling, customer impact measurement, and response reliability\n- Enhanced progressive data capture (company name, role)\n- Advanced auto-save with conflict resolution for concurrent sessions\n- Executive-optimized UX with clear risk indicators\n- Highest weight area requires extra attention to user experience\n\n**MOBILE-FIRST IMPLEMENTATION REQUIREMENTS:**\n- Target 40%+ mobile executive users with touch-optimized interface\n- Reference /workspaces/ai-scorecard/implementation-spec/user-experience-flow.md for progressive data capture patterns\n- Implement 44px minimum touch targets per mobile optimization specs\n- Mobile-friendly question cards with simplified navigation\n- Fixed bottom navigation for mobile with simplified CTA buttons\n- Responsive typography and spacing optimizations\n- Touch-optimized radio buttons and form controls\n\n**Enhanced Step Component:**\n```typescript\n// components/assessment/Step2Container.tsx\nexport function Step2Container() {\n  const { state, dispatch } = useAssessment();\n  const { isSaving, lastSaved, conflicts } = useAdvancedAutoSave(state.sessionId, 2, state.responses);\n  const [showRiskWarning, setShowRiskWarning] = useState(false);\n  const [isMobile, setIsMobile] = useState(false);\n  \n  // Detect mobile viewport\n  useEffect(() => {\n    const checkMobile = () => setIsMobile(window.innerWidth < 768);\n    checkMobile();\n    window.addEventListener('resize', checkMobile);\n    return () => window.removeEventListener('resize', checkMobile);\n  }, []);\n  \n  // Monitor for high-risk responses in Customer-Safe area\n  useEffect(() => {\n    const customerSafeResponses = Object.entries(state.responses)\n      .filter(([key]) => key.startsWith('customer_safe_'))\n      .map(([, value]) => value);\n    \n    // Show warning if any D or E responses (high risk)\n    const hasHighRisk = customerSafeResponses.some(response => ['D', 'E'].includes(response));\n    setShowRiskWarning(hasHighRisk);\n  }, [state.responses]);\n\n  if (isMobile) {\n    return (\n      <div className=\"mobile-step\">\n        {/* Mobile-optimized progress bar */}\n        <div className=\"bg-white px-4 py-3 border-b\">\n          <div className=\"flex items-center justify-between text-sm\">\n            <span className=\"text-gray-500\">Step 2 of 4</span>\n            <span className=\"text-blue-600 font-semibold\">50%</span>\n          </div>\n          <div className=\"w-full bg-gray-200 rounded-full h-1 mt-2\">\n            <div className=\"bg-blue-600 h-1 rounded-full transition-all duration-300\" style={{width: '50%'}}></div>\n          </div>\n        </div>\n        \n        {/* Mobile question layout */}\n        <div className=\"p-4 space-y-6 pb-20\">\n          <div>\n            <h2 className=\"text-lg font-semibold text-gray-900 mb-2\">\n              Customer-Safe AI\n            </h2>\n            <p className=\"text-sm text-gray-600\">\n              Assessing reliability for customer-facing AI systems\n            </p>\n          </div>\n          \n          {showRiskWarning && (\n            <MobileRiskWarningBanner \n              message=\"Your responses indicate potential customer safety risks. Consider scheduling an immediate AI safety review.\"\n            />\n          )}\n          \n          <MobileProgressiveCapture\n            currentData={{ email: state.email, company: state.company }}\n            onDataCapture={handleDataCapture}\n            stepNumber={2}\n          />\n          \n          <MobileCustomerSafeQuestions\n            responses={state.responses}\n            onResponseChange={handleResponseChange}\n          />\n        </div>\n        \n        {/* Fixed bottom navigation */}\n        <div className=\"fixed bottom-0 left-0 right-0 bg-white border-t px-4 py-3\">\n          <button \n            className=\"w-full bg-blue-600 text-white py-3 rounded-lg font-semibold disabled:bg-gray-300 min-h-[44px]\"\n            disabled={!canProceedToNext}\n            onClick={handleNext}\n          >\n            Next Step\n          </button>\n          {(isSaving || lastSaved) && (\n            <p className=\"text-xs text-gray-500 text-center mt-2\">\n              {isSaving ? 'Saving...' : `Last saved: ${formatTime(lastSaved)}`}\n            </p>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"assessment-step-2\">\n      <StepHeader \n        title=\"Customer-Safe AI\"\n        description=\"Assessing reliability for customer-facing AI systems\"\n        weight=\"35%\"\n        priority=\"highest\"\n      />\n      \n      {showRiskWarning && (\n        <RiskWarningBanner \n          message=\"Your responses indicate potential customer safety risks. Consider scheduling an immediate AI safety review.\"\n        />\n      )}\n      \n      <CustomerSafeQuestions\n        responses={state.responses}\n        onResponseChange={handleResponseChange}\n      />\n      \n      <EnhancedProgressiveCapture\n        currentData={{ email: state.email, company: state.company }}\n        onDataCapture={handleDataCapture}\n        stepNumber={2}\n      />\n      \n      <StepNavigation \n        canProceed={canProceedToNext}\n        onNext={handleNext}\n        saveStatus={{ isSaving, lastSaved, conflicts }}\n      />\n    </div>\n  );\n}\n```\n\n**Mobile-Optimized Question Component:**\n```typescript\n// components/assessment/MobileCustomerSafeQuestions.tsx\nexport function MobileCustomerSafeQuestions({ responses, onResponseChange }) {\n  return (\n    <div className=\"space-y-4\">\n      {customerSafeQuestions.map(question => (\n        <div key={question.id} className=\"mobile-question bg-white rounded-lg border p-4\">\n          <h3 className=\"font-medium text-gray-900 mb-3 text-sm leading-relaxed\">\n            {question.text}\n          </h3>\n          \n          <div className=\"space-y-2\">\n            {question.options.map(option => (\n              <label \n                key={option.value}\n                className=\"flex items-start gap-3 p-3 -mx-1 rounded-lg active:bg-gray-100 cursor-pointer min-h-[44px]\"\n              >\n                <input \n                  type=\"radio\" \n                  name={question.id}\n                  value={option.value}\n                  checked={responses[question.id] === option.value}\n                  onChange={() => onResponseChange(question.id, option.value)}\n                  className=\"mt-1 text-blue-600 min-w-[16px] min-h-[16px]\"\n                />\n                <span className=\"text-sm text-gray-700 leading-relaxed flex-1\">\n                  {option.text}\n                </span>\n              </label>\n            ))}\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}\n```\n\n**Mobile Progressive Data Capture:**\n```typescript\n// components/assessment/MobileProgressiveCapture.tsx\nexport function MobileProgressiveCapture({ currentData, onDataCapture, stepNumber }) {\n  const [activeCapture, setActiveCapture] = useState(null);\n  \n  // Determine what to capture based on step and existing data\n  const getNextCapture = () => {\n    if (!currentData.email) return 'email';\n    if (stepNumber >= 2 && !currentData.company) return 'company';\n    return null;\n  };\n\n  useEffect(() => {\n    const nextCapture = getNextCapture();\n    if (nextCapture && !activeCapture) {\n      setActiveCapture(nextCapture);\n    }\n  }, [stepNumber, currentData]);\n\n  if (!activeCapture) {\n    return (\n      <div className=\"text-center py-2\">\n        <button \n          className=\"text-sm text-blue-600 underline min-h-[44px] px-4\"\n          onClick={() => setActiveCapture('company')}\n        >\n          Add company details for personalized recommendations\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-blue-50 p-3 rounded-lg text-sm\">\n      {activeCapture === 'email' && (\n        <div>\n          <p className=\"text-blue-800 font-medium mb-2\">\n            Get results emailed (optional)\n          </p>\n          <input \n            type=\"email\" \n            placeholder=\"your.email@company.com\"\n            className=\"w-full px-3 py-2 text-sm border border-blue-200 rounded min-h-[44px]\"\n            onChange={(e) => handleEmailChange(e.target.value)}\n          />\n        </div>\n      )}\n      \n      {activeCapture === 'company' && (\n        <div>\n          <p className=\"text-blue-800 font-medium mb-2\">\n            Company name for industry insights\n          </p>\n          <input \n            type=\"text\" \n            placeholder=\"Your company name\"\n            className=\"w-full px-3 py-2 text-sm border border-blue-200 rounded min-h-[44px]\"\n            onChange={(e) => handleCompanyChange(e.target.value)}\n          />\n        </div>\n      )}\n    </div>\n  );\n}\n```\n\n**SESSION MANAGEMENT & AUTO-SAVE INTEGRATION:**\n\n**Advanced Auto-Save with Mobile Optimization:**\n```typescript\n// hooks/useAdvancedAutoSave.ts\nexport function useAdvancedAutoSave(\n  sessionId: string,\n  currentStep: number,\n  responses: Record<string, string>,\n  email?: string\n) {\n  const [saveState, setSaveState] = useState({\n    isSaving: false,\n    lastSaved: null,\n    conflicts: [],\n    retryCount: 0,\n    isOffline: false\n  });\n\n  // Detect online/offline status for mobile users\n  useEffect(() => {\n    const handleOnline = () => setSaveState(prev => ({ ...prev, isOffline: false }));\n    const handleOffline = () => setSaveState(prev => ({ ...prev, isOffline: true }));\n    \n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n    \n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }, []);\n\n  const saveProgress = useCallback(async () => {\n    if (!sessionId || saveState.isSaving || saveState.isOffline) {\n      // Store locally if offline\n      if (saveState.isOffline) {\n        localStorage.setItem('assessment-offline-data', JSON.stringify({\n          step: currentStep,\n          responses,\n          email,\n          timestamp: Date.now()\n        }));\n      }\n      return;\n    }\n    \n    setSaveState(prev => ({ ...prev, isSaving: true }));\n    \n    try {\n      const response = await fetch('/api/assessment/save-progress', {\n        method: 'POST',\n        headers: { \n          'Content-Type': 'application/json',\n          'If-Match': saveState.lastSaved?.toISOString()\n        },\n        body: JSON.stringify({\n          sessionId,\n          step: currentStep,\n          responses,\n          email,\n          userAgent: navigator.userAgent,\n          viewport: { width: window.innerWidth, height: window.innerHeight },\n          timeSpent: Math.floor((Date.now() - stepStartTime) / 1000),\n          clientTimestamp: new Date().toISOString()\n        })\n      });\n\n      if (response.status === 409) {\n        const conflictData = await response.json();\n        setSaveState(prev => ({\n          ...prev,\n          conflicts: [conflictData.conflict],\n          isSaving: false\n        }));\n        return;\n      }\n\n      if (!response.ok) {\n        throw new Error(`Save failed: ${response.status}`);\n      }\n\n      // Clear offline data on successful save\n      localStorage.removeItem('assessment-offline-data');\n      \n      setSaveState(prev => ({\n        ...prev,\n        lastSaved: new Date(),\n        conflicts: [],\n        retryCount: 0,\n        isSaving: false\n      }));\n\n    } catch (error) {\n      console.error('Auto-save failed:', error);\n      \n      // Store locally as backup\n      localStorage.setItem('assessment-backup', JSON.stringify({\n        step: currentStep,\n        responses,\n        email,\n        timestamp: Date.now()\n      }));\n      \n      // Exponential backoff retry\n      const delay = Math.min(1000 * Math.pow(2, saveState.retryCount), 30000);\n      \n      setTimeout(() => {\n        setSaveState(prev => ({ \n          ...prev, \n          retryCount: prev.retryCount + 1,\n          isSaving: false \n        }));\n        \n        if (saveState.retryCount < 3) {\n          saveProgress();\n        }\n      }, delay);\n    }\n  }, [sessionId, currentStep, responses, email, saveState]);\n\n  // Debounced auto-save optimized for mobile\n  useEffect(() => {\n    const timer = setTimeout(saveProgress, 2000); // Slightly faster for mobile\n    return () => clearTimeout(timer);\n  }, [responses, email]);\n\n  // Sync offline data when coming back online\n  useEffect(() => {\n    if (!saveState.isOffline && saveState.lastSaved === null) {\n      const offlineData = localStorage.getItem('assessment-offline-data');\n      if (offlineData) {\n        saveProgress();\n      }\n    }\n  }, [saveState.isOffline]);\n\n  return saveState;\n}\n```\n\n**TDD IMPLEMENTATION WITH MOBILE-FIRST APPROACH:**\n\n**RED Phase - Mobile-First Failing Tests:**\n```typescript\n// tests/components/assessment/Step2Container.mobile.test.tsx\ndescribe('Step 2 Container - Mobile Experience', () => {\n  beforeEach(() => {\n    // Mock mobile viewport\n    Object.defineProperty(window, 'innerWidth', { value: 375 });\n    Object.defineProperty(window, 'innerHeight', { value: 667 });\n  });\n\n  test('should render mobile layout below 768px viewport', () => {\n    render(<Step2Container />);\n    \n    expect(screen.getByTestId('mobile-step')).toBeInTheDocument();\n    expect(screen.getByTestId('fixed-bottom-nav')).toBeInTheDocument();\n    expect(screen.queryByTestId('desktop-step-header')).not.toBeInTheDocument();\n  });\n\n  test('should have minimum 44px touch targets', () => {\n    render(<Step2Container />);\n    \n    const touchTargets = screen.getAllByRole('button');\n    touchTargets.forEach(button => {\n      const styles = getComputedStyle(button);\n      const height = parseInt(styles.minHeight);\n      expect(height).toBeGreaterThanOrEqual(44);\n    });\n  });\n\n  test('should show simplified progressive capture on mobile', () => {\n    render(\n      <AssessmentProvider initialState={{ email: 'test@company.com' }}>\n        <Step2Container />\n      </AssessmentProvider>\n    );\n    \n    expect(screen.getByText(/company name for industry insights/i)).toBeInTheDocument();\n  });\n\n  test('should handle offline state gracefully', async () => {\n    const mockNavigator = { onLine: false };\n    Object.defineProperty(window, 'navigator', { value: mockNavigator });\n    \n    render(<Step2Container />);\n    \n    // Simulate answering question while offline\n    const radioButton = screen.getByRole('radio', { name: /option a/i });\n    await user.click(radioButton);\n    \n    // Should store data locally\n    expect(localStorage.getItem('assessment-offline-data')).toBeTruthy();\n  });\n});\n\n// tests/components/assessment/MobileCustomerSafeQuestions.test.tsx\ndescribe('Mobile Customer Safe Questions', () => {\n  test('should render touch-optimized question cards', () => {\n    render(\n      <MobileCustomerSafeQuestions \n        responses={{}}\n        onResponseChange={jest.fn()}\n      />\n    );\n    \n    const questionCards = screen.getAllByTestId('mobile-question-card');\n    expect(questionCards).toHaveLength(4); // 4 customer-safe questions\n    \n    questionCards.forEach(card => {\n      expect(card).toHaveClass('rounded-lg');\n      expect(card).toHaveClass('p-4');\n    });\n  });\n\n  test('should have proper spacing for touch interactions', () => {\n    render(\n      <MobileCustomerSafeQuestions \n        responses={{}}\n        onResponseChange={jest.fn()}\n      />\n    );\n    \n    const radioLabels = screen.getAllByRole('radio');\n    radioLabels.forEach(label => {\n      const parentLabel = label.closest('label');\n      expect(parentLabel).toHaveClass('min-h-[44px]');\n    });\n  });\n});\n```\n\n**GREEN Phase - Minimal Mobile Implementation:**\n- Basic mobile viewport detection\n- Simplified mobile layout with fixed bottom navigation\n- Touch-optimized form controls with minimum 44px targets\n- Basic offline data storage\n\n**REFACTOR Phase - Production Mobile Experience:**\n- Advanced touch gesture support\n- Optimized mobile performance with lazy loading\n- Sophisticated offline sync with conflict resolution\n- Mobile-specific analytics and user behavior tracking\n\n**KEY FILES TO CREATE (MOBILE-FOCUSED):**\n- /components/assessment/Step2Container.tsx - Enhanced with mobile-first responsive design\n- /components/assessment/MobileCustomerSafeQuestions.tsx - Touch-optimized question interface\n- /components/assessment/MobileProgressiveCapture.tsx - Mobile-friendly data capture\n- /components/assessment/MobileRiskWarningBanner.tsx - Mobile risk warning system\n- /hooks/useAdvancedAutoSave.ts - Auto-save with offline support\n- /hooks/useMobileDetection.ts - Mobile viewport and touch detection\n- /tests/components/assessment/mobile/ - Mobile-specific test suite\n- /styles/mobile-assessment.css - Mobile-first responsive styles",
        "testStrategy": "**MOBILE-FIRST TDD APPROACH:**\n\n**RED Phase - Mobile Touch Optimization Tests:**\n- Test 44px minimum touch targets per user-experience-flow.md specs\n- Validate responsive breakpoints and mobile layout rendering\n- Test touch gesture interactions and mobile-specific user flows\n- Verify offline data storage and session recovery on mobile devices\n- Test progressive data capture timing and mobile form validation\n- Validate mobile-optimized auto-save functionality with network interruptions\n\n**Mobile Test Categories:**\n1. **Viewport & Responsive Tests:** Mobile layout detection, breakpoint behavior, touch target sizing\n2. **Touch Interaction Tests:** Radio button selection, form input focus, scroll behavior\n3. **Progressive Capture Tests:** Mobile-friendly email/company capture, simplified form flows\n4. **Offline/Network Tests:** Auto-save during network issues, data recovery, sync on reconnection\n5. **Performance Tests:** Mobile loading speeds, component lazy loading, memory usage\n\n**GREEN Phase - Mobile Implementation:**\n- Implement mobile viewport detection and conditional rendering\n- Create touch-optimized components with proper sizing\n- Build simplified mobile progressive capture flow\n- Implement basic offline data storage\n\n**REFACTOR Phase - Advanced Mobile UX:**\n- Advanced mobile performance optimizations\n- Sophisticated offline sync and conflict resolution\n- Mobile-specific analytics and behavior tracking\n- Advanced touch gestures and mobile accessibility features",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "Assessment Steps 3 & 4 UI - Risk Management & Governance",
        "description": "Build the final two assessment steps covering Model Risk & Compliance (25% weight) and Implementation Governance (15% weight). Implement completion flow with comprehensive data capture, final validation, and seamless transition to results with mobile-first TDD methodology targeting 40%+ executive mobile users.",
        "status": "pending",
        "dependencies": [],
        "priority": "medium",
        "details": "**MOBILE-FIRST STEPS 3 & 4 UI IMPLEMENTATION:**\n\n**Mobile-First Requirements (40%+ Executive Mobile Users):**\n- Reference /workspaces/ai-scorecard/implementation-spec/user-experience-flow.md for mobile breakpoints and touch optimization\n- 44px minimum touch targets for all interactive elements\n- Responsive typography scaling and mobile-optimized layouts\n- Touch gesture support and mobile-specific user interactions\n- Offline-capable data persistence and progressive enhancement\n\n**Step 3: Model Risk & Compliance (25% weight):**\n- 4 questions covering data privacy compliance, AI bias testing, audit trail & explainability, and regulatory preparedness\n- Compliance-focused progressive capture (phone number, executive role)\n- Enhanced validation with regulatory compliance indicators\n- GDPR/CCPA compliance warnings for certain response patterns\n- Mobile-optimized compliance warning banners with touch-friendly interactions\n\n**Step 4: Implementation Governance (15% weight):**\n- 4 questions covering AI implementation processes, change management, team structure, and governance oversight\n- Final contact information completion with mobile-optimized forms\n- Assessment completion preparation and validation\n- Executive briefing qualification assessment\n- Seamless results transition integration\n\n**Mobile-First Component Architecture:**\n```typescript\n// components/assessment/FinalStepsContainer.tsx\ninterface FinalStepsContainerProps {\n  stepNumber: 3 | 4;\n}\n\nexport function FinalStepsContainer({ stepNumber }: FinalStepsContainerProps) {\n  const { state, dispatch } = useAssessment();\n  const [qualificationLevel, setQualificationLevel] = useState<QualificationLevel>('basic');\n  const [showComplianceWarning, setShowComplianceWarning] = useState(false);\n  const [isReadyForCompletion, setIsReadyForCompletion] = useState(false);\n  const [isMobile, setIsMobile] = useState(false);\n\n  // Mobile detection and responsive optimization\n  useEffect(() => {\n    const checkMobile = () => setIsMobile(window.innerWidth < 768);\n    checkMobile();\n    window.addEventListener('resize', checkMobile);\n    return () => window.removeEventListener('resize', checkMobile);\n  }, []);\n\n  // Monitor compliance risks in Step 3\n  useEffect(() => {\n    if (stepNumber === 3) {\n      const complianceResponses = getRiskComplianceResponses(state.responses);\n      const hasComplianceRisks = complianceResponses.some(response => ['D', 'E'].includes(response));\n      setShowComplianceWarning(hasComplianceRisks);\n    }\n  }, [stepNumber, state.responses]);\n\n  // Assess qualification level as user progresses\n  useEffect(() => {\n    const level = assessExecutiveBriefingQualification(state);\n    setQualificationLevel(level);\n  }, [state]);\n\n  // Check completion readiness in Step 4\n  useEffect(() => {\n    if (stepNumber === 4) {\n      const isReady = validateCompletionReadiness(state);\n      setIsReadyForCompletion(isReady);\n    }\n  }, [stepNumber, state]);\n\n  const handleComplete = async () => {\n    // Completion flow with results transition integration\n    await completeAssessment(state);\n    // Navigate to results with transition animation\n    router.push('/results', { scroll: false });\n  };\n\n  return (\n    <div className={cn(\n      `assessment-step-${stepNumber}`,\n      \"min-h-screen flex flex-col\",\n      isMobile && \"px-4 py-6\" // Mobile padding optimization\n    )}>\n      <StepHeader \n        title={stepNumber === 3 ? 'Model Risk & Compliance' : 'Implementation Governance'}\n        description={stepNumber === 3 \n          ? 'Reviews regulation readiness and model validation'\n          : 'Evaluates AI implementation processes and controls'\n        }\n        weight={stepNumber === 3 ? '25%' : '15%'}\n        isLastStep={stepNumber === 4}\n        isMobile={isMobile}\n      />\n\n      {stepNumber === 3 && showComplianceWarning && (\n        <ComplianceWarningBanner isMobile={isMobile} />\n      )}\n\n      {stepNumber === 3 ? (\n        <RiskComplianceQuestions\n          responses={state.responses}\n          onResponseChange={handleResponseChange}\n          isMobile={isMobile}\n        />\n      ) : (\n        <GovernanceQuestions\n          responses={state.responses}\n          onResponseChange={handleResponseChange}\n          isMobile={isMobile}\n        />\n      )}\n\n      <FinalProgressiveCapture\n        stepNumber={stepNumber}\n        currentData={state.contactInfo}\n        qualificationLevel={qualificationLevel}\n        onDataCapture={handleDataCapture}\n        isMobile={isMobile}\n      />\n\n      {stepNumber === 4 && (\n        <CompletionReadinessIndicator\n          isReady={isReadyForCompletion}\n          qualificationLevel={qualificationLevel}\n          onComplete={handleComplete}\n          isMobile={isMobile}\n        />\n      )}\n\n      <StepNavigation \n        canProceed={canProceedToNext}\n        isLastStep={stepNumber === 4}\n        completionReady={isReadyForCompletion}\n        onNext={stepNumber === 4 ? handleComplete : handleNext}\n        onPrevious={handlePrevious}\n        isMobile={isMobile}\n      />\n    </div>\n  );\n}\n```\n\n**Mobile-Optimized Compliance Warning System:**\n```typescript\n// components/assessment/ComplianceWarningBanner.tsx\ninterface ComplianceWarningBannerProps {\n  isMobile: boolean;\n}\n\nexport function ComplianceWarningBanner({ isMobile }: ComplianceWarningBannerProps) {\n  const [showDetails, setShowDetails] = useState(false);\n\n  return (\n    <div className={cn(\n      \"compliance-warning bg-orange-50 border border-orange-200 rounded-lg mb-6\",\n      isMobile ? \"p-4\" : \"p-6\"\n    )}>\n      <div className=\"flex items-start gap-3\">\n        <div className={cn(\n          \"text-orange-600\",\n          isMobile ? \"text-xl\" : \"text-2xl\"\n        )}>⚖️</div>\n        <div className=\"flex-1\">\n          <h4 className={cn(\n            \"font-semibold text-orange-900 mb-2\",\n            isMobile ? \"text-base\" : \"text-lg\"\n          )}>\n            Regulatory Compliance Concerns Detected\n          </h4>\n          <p className={cn(\n            \"text-orange-800 mb-3\",\n            isMobile ? \"text-sm\" : \"text-base\"\n          )}>\n            Your responses indicate potential gaps in regulatory compliance (GDPR, CCPA, AI Act). \n            This could expose your organization to significant legal and financial risks.\n          </p>\n          \n          <div className=\"flex flex-col gap-2 sm:flex-row\">\n            <button \n              onClick={() => setShowDetails(!showDetails)}\n              className={cn(\n                \"text-orange-700 underline hover:no-underline text-left\",\n                isMobile ? \"text-sm min-h-[44px] flex items-center\" : \"text-sm\"\n              )}\n            >\n              {showDetails ? 'Hide' : 'View'} compliance requirements\n            </button>\n            <span className=\"text-sm text-orange-600 hidden sm:inline\">•</span>\n            <button className={cn(\n              \"text-orange-700 underline hover:no-underline text-left\",\n              isMobile ? \"text-sm min-h-[44px] flex items-center\" : \"text-sm\"\n            )}>\n              Schedule compliance audit\n            </button>\n          </div>\n\n          {showDetails && (\n            <div className={cn(\n              \"mt-4 p-3 bg-orange-100 rounded text-orange-800\",\n              isMobile ? \"text-sm\" : \"text-base\"\n            )}>\n              <h5 className=\"font-medium mb-2\">Key Compliance Areas to Address:</h5>\n              <ul className=\"list-disc list-inside space-y-1\">\n                <li>Data privacy by design implementation</li>\n                <li>AI bias testing and mitigation processes</li>\n                <li>Explainable AI and audit trail requirements</li>\n                <li>Right to explanation compliance</li>\n              </ul>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n```\n\n**Mobile-Optimized Completion Flow with Results Transition:**\n```typescript\n// components/assessment/CompletionReadinessIndicator.tsx\ninterface CompletionReadinessIndicatorProps {\n  isReady: boolean;\n  qualificationLevel: QualificationLevel;\n  onComplete: () => void;\n  isMobile: boolean;\n}\n\nexport function CompletionReadinessIndicator({ \n  isReady, \n  qualificationLevel, \n  onComplete,\n  isMobile\n}: CompletionReadinessIndicatorProps) {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const handleComplete = async () => {\n    setIsSubmitting(true);\n    try {\n      // Prepare results data and create transition\n      await prepareResultsTransition();\n      await onComplete();\n    } catch (error) {\n      console.error('Completion failed:', error);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <div className=\"completion-readiness border-t border-gray-200 pt-6 mt-8\">\n      <div className={cn(\n        \"flex items-center justify-between rounded-lg bg-gray-50\",\n        isMobile ? \"flex-col gap-4 p-4\" : \"flex-row p-4\"\n      )}>\n        <div className={cn(\n          \"flex items-center gap-3\",\n          isMobile && \"text-center flex-col\"\n        )}>\n          <div className={cn(\n            \"rounded-full\",\n            isMobile ? \"w-4 h-4\" : \"w-3 h-3\",\n            isReady ? \"bg-green-500\" : \"bg-yellow-500\"\n          )} />\n          <div>\n            <p className={cn(\n              \"font-medium text-gray-900\",\n              isMobile ? \"text-base\" : \"text-sm\"\n            )}>\n              {isReady ? 'Ready to Complete Assessment' : 'Complete All Questions to Continue'}\n            </p>\n            <p className={cn(\n              \"text-gray-600\",\n              isMobile ? \"text-sm\" : \"text-xs\"\n            )}>\n              {isReady \n                ? `Your ${qualificationLevel.replace('_', ' ')} results are ready`\n                : 'Answer all required questions to see your results'\n              }\n            </p>\n          </div>\n        </div>\n\n        <button\n          onClick={handleComplete}\n          disabled={!isReady || isSubmitting}\n          className={cn(\n            \"font-medium transition-colors rounded-md\",\n            isMobile ? \"w-full py-3 px-6 text-base min-h-[44px]\" : \"px-6 py-2 text-sm\",\n            isReady\n              ? \"bg-blue-600 text-white hover:bg-blue-700 active:bg-blue-800\"\n              : \"bg-gray-300 text-gray-500 cursor-not-allowed\"\n          )}\n        >\n          {isSubmitting ? 'Processing...' : 'Complete Assessment'}\n        </button>\n      </div>\n    </div>\n  );\n}\n```\n\n**Results Transition Integration:**\n```typescript\n// lib/completion/results-transition.ts\nexport async function prepareResultsTransition() {\n  // Pre-load results page components\n  const { ScoreVisualization } = await import('../components/results/ScoreVisualization');\n  const { RecommendationEngine } = await import('../components/results/RecommendationEngine');\n  \n  // Cache results data for immediate display\n  await cacheResultsData();\n  \n  // Prepare transition animations\n  prepareTransitionAnimations();\n}\n\nexport function completeAssessment(state: AssessmentState) {\n  // Calculate final scores\n  const scores = calculateFinalScores(state.responses);\n  \n  // Generate personalized recommendations\n  const recommendations = generateRecommendations(scores, state.contactInfo);\n  \n  // Store completion data\n  storeCompletionData({\n    scores,\n    recommendations,\n    contactInfo: state.contactInfo,\n    qualificationLevel: assessExecutiveBriefingQualification(state),\n    completedAt: new Date().toISOString()\n  });\n  \n  // Trigger results page transition\n  return triggerResultsTransition();\n}\n```\n\n**MOBILE-FIRST TDD IMPLEMENTATION APPROACH:**\n\n**RED Phase - Mobile Touch Optimization Tests:**\n```typescript\n// tests/components/assessment/FinalStepsContainer.mobile.test.tsx\ndescribe('Final Steps Container - Mobile', () => {\n  test('should render touch-optimized buttons with 44px minimum height', () => {\n    render(\n      <AssessmentProvider initialState={mockMobileState}>\n        <FinalStepsContainer stepNumber={4} />\n      </AssessmentProvider>\n    );\n\n    const touchTargets = screen.getAllByRole('button');\n    touchTargets.forEach(button => {\n      expect(button).toHaveStyle({ minHeight: '44px' });\n    });\n  });\n\n  test('should optimize layout for mobile viewport per user-experience-flow.md', () => {\n    Object.defineProperty(window, 'innerWidth', { value: 375 });\n    \n    render(\n      <AssessmentProvider>\n        <FinalStepsContainer stepNumber={3} />\n      </AssessmentProvider>\n    );\n\n    expect(screen.getByTestId('step-container')).toHaveClass('px-4', 'py-6');\n  });\n\n  test('should handle results transition smoothly on mobile', async () => {\n    const mockRouter = { push: jest.fn() };\n    jest.spyOn(require('next/router'), 'useRouter').mockReturnValue(mockRouter);\n\n    render(\n      <AssessmentProvider initialState={completeAssessmentState}>\n        <FinalStepsContainer stepNumber={4} />\n      </AssessmentProvider>\n    );\n\n    const completeButton = screen.getByRole('button', { name: /complete assessment/i });\n    await userEvent.click(completeButton);\n\n    expect(mockRouter.push).toHaveBeenCalledWith('/results', { scroll: false });\n  });\n});\n```\n\n**KEY MOBILE-FIRST FILES TO CREATE:**\n- /components/assessment/FinalStepsContainer.tsx - Mobile-optimized Steps 3 & 4 container\n- /components/assessment/ComplianceWarningBanner.tsx - Touch-friendly compliance warnings\n- /components/assessment/FinalProgressiveCapture.tsx - Mobile-optimized final data capture\n- /components/assessment/CompletionReadinessIndicator.tsx - Mobile completion status\n- /lib/completion/results-transition.ts - Seamless results page transition\n- /lib/mobile/touch-optimization.ts - Mobile touch interaction utilities\n- /tests/components/assessment/final-steps-mobile/ - Mobile-specific test suites\n- /tests/lib/completion/results-transition.test.ts - Results transition tests",
        "testStrategy": "**MOBILE-FIRST TDD APPROACH (40%+ Executive Mobile Users):**\n\n**RED Phase - Mobile Touch Optimization Tests:**\n- Test 44px minimum touch targets per /workspaces/ai-scorecard/implementation-spec/user-experience-flow.md specifications\n- Validate responsive breakpoints and mobile layout rendering\n- Test touch gesture interactions and mobile-specific user flows\n- Verify offline data persistence and progressive enhancement\n- Test results transition flow integration and smooth page transitions\n\n**GREEN Phase - Mobile-First Implementation:**\n- Implement touch-optimized UI components with proper hit areas\n- Build responsive layouts prioritizing mobile executive users\n- Create mobile-specific progressive capture patterns\n- Implement seamless results page transition with pre-loading\n\n**REFACTOR Phase - Executive Mobile Optimization:**\n- Advanced mobile gesture support and touch interactions\n- Sophisticated mobile performance optimization\n- Executive-focused mobile UX refinements\n- Advanced results transition animations and state management",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "Results Page & Executive Briefing CTA",
        "description": "Build the comprehensive results page with score visualization, personalized recommendations, and executive briefing conversion flow. Implement progressive value delivery based on qualification level and strong call-to-action optimization with TDD methodology.",
        "status": "pending",
        "dependencies": [],
        "priority": "high",
        "details": "**RESULTS PAGE IMPLEMENTATION:**\n\n**Results Page Architecture:**\n- Dynamic content based on qualification level (basic, enhanced, executive_briefing_qualified)\n- Progressive value delivery with Tier 1-4 display system per user-experience-flow.md\n- Score visualization with area breakdowns and category indicators\n- Personalized recommendations and action items\n- Executive briefing CTA optimization with A/B testing support\n- Social sharing and PDF report download capabilities\n- Executive briefing qualification logic with automatic tier assignment\n\n**Progressive Value Delivery Tiers (per user-experience-flow.md):**\n```typescript\n// types/results.ts\ninterface ResultsTier {\n  level: 1 | 2 | 3 | 4;\n  qualificationLevel: QualificationLevel;\n  features: {\n    scoreVisualization: 'basic' | 'enhanced' | 'detailed' | 'comprehensive';\n    recommendations: 'generic' | 'personalized' | 'actionable' | 'strategic';\n    downloadAccess: boolean;\n    sharingEnabled: boolean;\n    executiveBriefingCTA: boolean;\n  };\n}\n\nconst RESULTS_TIERS: ResultsTier[] = [\n  {\n    level: 1,\n    qualificationLevel: 'basic',\n    features: {\n      scoreVisualization: 'basic',\n      recommendations: 'generic',\n      downloadAccess: false,\n      sharingEnabled: false,\n      executiveBriefingCTA: false\n    }\n  },\n  {\n    level: 2,\n    qualificationLevel: 'enhanced',\n    features: {\n      scoreVisualization: 'enhanced',\n      recommendations: 'personalized',\n      downloadAccess: true,\n      sharingEnabled: true,\n      executiveBriefingCTA: false\n    }\n  },\n  {\n    level: 3,\n    qualificationLevel: 'qualified',\n    features: {\n      scoreVisualization: 'detailed',\n      recommendations: 'actionable',\n      downloadAccess: true,\n      sharingEnabled: true,\n      executiveBriefingCTA: true\n    }\n  },\n  {\n    level: 4,\n    qualificationLevel: 'executive_briefing_qualified',\n    features: {\n      scoreVisualization: 'comprehensive',\n      recommendations: 'strategic',\n      downloadAccess: true,\n      sharingEnabled: true,\n      executiveBriefingCTA: true\n    }\n  }\n];\n```\n\n**Results Page Component Structure:**\n```typescript\n// app/assessment/results/page.tsx\ninterface ResultsPageProps {\n  searchParams: { session?: string; share?: string };\n}\n\nexport default async function ResultsPage({ searchParams }: ResultsPageProps) {\n  const sessionId = searchParams.session;\n  const isSharedView = Boolean(searchParams.share);\n  \n  if (!sessionId) {\n    return <ResultsError message=\"Assessment session not found\" />;\n  }\n\n  const results = await getAssessmentResults(sessionId);\n  \n  if (!results) {\n    return <ResultsError message=\"Results not available\" />;\n  }\n\n  const resultsTier = determineResultsTier(results.qualificationLevel);\n\n  return (\n    <ResultsContainer \n      results={results}\n      tier={resultsTier}\n      isSharedView={isSharedView}\n    />\n  );\n}\n\n// components/results/ResultsContainer.tsx\ninterface ResultsContainerProps {\n  results: AssessmentResults;\n  tier: ResultsTier;\n  isSharedView?: boolean;\n}\n\nexport function ResultsContainer({ results, tier, isSharedView }: ResultsContainerProps) {\n  const [activeTab, setActiveTab] = useState<'overview' | 'recommendations' | 'action-plan'>('overview');\n  const [showShareModal, setShowShareModal] = useState(false);\n  const [showPdfModal, setShowPdfModal] = useState(false);\n  const [abTestVariant] = useState(() => getABTestVariant('results-cta', results.email));\n\n  return (\n    <div className=\"results-container min-h-screen bg-gradient-to-br from-gray-50 to-blue-50\">\n      <ResultsHeader \n        score={results.totalScore}\n        category={results.scoreCategory}\n        completionTime={results.completionTime}\n        tier={tier}\n      />\n      \n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"grid lg:grid-cols-3 gap-8\">\n          <div className=\"lg:col-span-2\">\n            <ScoreVisualization \n              totalScore={results.totalScore}\n              breakdown={results.scoreBreakdown}\n              category={results.scoreCategory}\n              visualizationLevel={tier.features.scoreVisualization}\n            />\n            \n            <ResultsTabs\n              activeTab={activeTab}\n              onTabChange={setActiveTab}\n              results={results}\n              tier={tier}\n            />\n            \n            <TabContent\n              activeTab={activeTab}\n              results={results}\n              tier={tier}\n            />\n          </div>\n          \n          <div className=\"lg:col-span-1\">\n            {tier.features.executiveBriefingCTA && (\n              <ExecutiveBriefingCTA\n                qualificationLevel={results.qualificationLevel}\n                scoreCategory={results.scoreCategory}\n                variant={abTestVariant}\n                onSchedule={handleScheduleBriefing}\n              />\n            )}\n            \n            {!isSharedView && (\n              <ResultsActions\n                results={results}\n                tier={tier}\n                onShare={tier.features.sharingEnabled ? () => setShowShareModal(true) : undefined}\n                onDownload={tier.features.downloadAccess ? () => setShowPdfModal(true) : undefined}\n                onEmailResults={handleEmailResults}\n              />\n            )}\n          </div>\n        </div>\n      </div>\n\n      {showShareModal && tier.features.sharingEnabled && (\n        <ShareModal\n          results={results}\n          onClose={() => setShowShareModal(false)}\n        />\n      )}\n      \n      {showPdfModal && tier.features.downloadAccess && (\n        <PdfDownloadModal\n          results={results}\n          onClose={() => setShowPdfModal(false)}\n        />\n      )}\n    </div>\n  );\n}\n```\n\n**PDF Download Implementation:**\n```typescript\n// components/results/PdfDownloadModal.tsx\ninterface PdfDownloadModalProps {\n  results: AssessmentResults;\n  onClose: () => void;\n}\n\nexport function PdfDownloadModal({ results, onClose }: PdfDownloadModalProps) {\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [downloadUrl, setDownloadUrl] = useState<string | null>(null);\n\n  const generatePdfReport = async () => {\n    setIsGenerating(true);\n    try {\n      const response = await fetch('/api/results/generate-pdf', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ sessionId: results.sessionId })\n      });\n      \n      if (response.ok) {\n        const blob = await response.blob();\n        const url = URL.createObjectURL(blob);\n        setDownloadUrl(url);\n        \n        // Auto-download\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = `ai-scorecard-results-${results.sessionId}.pdf`;\n        a.click();\n        \n        // Track download\n        await trackEvent('pdf_downloaded', {\n          sessionId: results.sessionId,\n          score: results.totalScore,\n          category: results.scoreCategory\n        });\n      }\n    } catch (error) {\n      console.error('PDF generation failed:', error);\n    } finally {\n      setIsGenerating(false);\n    }\n  };\n\n  return (\n    <Modal onClose={onClose}>\n      <div className=\"pdf-download-modal p-6\">\n        <h3 className=\"text-xl font-bold mb-4\">Download Your AI Scorecard Report</h3>\n        \n        <div className=\"space-y-4\">\n          <div className=\"bg-blue-50 p-4 rounded-lg\">\n            <h4 className=\"font-semibold text-blue-900 mb-2\">Your Report Includes:</h4>\n            <ul className=\"text-blue-800 space-y-1\">\n              <li>✓ Complete score breakdown by area</li>\n              <li>✓ Personalized recommendations</li>\n              <li>✓ Action plan with priorities</li>\n              <li>✓ Industry benchmarking</li>\n              <li>✓ Implementation roadmap</li>\n            </ul>\n          </div>\n          \n          <div className=\"flex gap-3\">\n            <button\n              onClick={generatePdfReport}\n              disabled={isGenerating}\n              className=\"flex-1 bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 disabled:opacity-50\"\n            >\n              {isGenerating ? 'Generating...' : 'Download PDF Report'}\n            </button>\n            <button\n              onClick={onClose}\n              className=\"px-4 py-2 border border-gray-300 rounded-md hover:bg-gray-50\"\n            >\n              Cancel\n            </button>\n          </div>\n        </div>\n      </div>\n    </Modal>\n  );\n}\n\n// app/api/results/generate-pdf/route.ts\nimport { NextRequest, NextResponse } from 'next/server';\nimport puppeteer from 'puppeteer';\nimport { getAssessmentResults } from '@/lib/assessment';\n\nexport async function POST(request: NextRequest) {\n  try {\n    const { sessionId } = await request.json();\n    \n    const results = await getAssessmentResults(sessionId);\n    if (!results) {\n      return NextResponse.json({ error: 'Results not found' }, { status: 404 });\n    }\n\n    const browser = await puppeteer.launch();\n    const page = await browser.newPage();\n    \n    // Generate HTML for PDF\n    const htmlContent = await generatePdfHtml(results);\n    await page.setContent(htmlContent);\n    \n    const pdf = await page.pdf({\n      format: 'A4',\n      printBackground: true,\n      margin: { top: '20px', bottom: '20px', left: '20px', right: '20px' }\n    });\n    \n    await browser.close();\n    \n    return new NextResponse(pdf, {\n      headers: {\n        'Content-Type': 'application/pdf',\n        'Content-Disposition': `attachment; filename=\"ai-scorecard-${sessionId}.pdf\"`\n      }\n    });\n  } catch (error) {\n    console.error('PDF generation error:', error);\n    return NextResponse.json({ error: 'PDF generation failed' }, { status: 500 });\n  }\n}\n```\n\n**Social Sharing Implementation:**\n```typescript\n// components/results/ShareModal.tsx\ninterface ShareModalProps {\n  results: AssessmentResults;\n  onClose: () => void;\n}\n\nexport function ShareModal({ results, onClose }: ShareModalProps) {\n  const [shareUrl, setShareUrl] = useState<string>('');\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [copied, setCopied] = useState(false);\n\n  const generateShareUrl = async () => {\n    setIsGenerating(true);\n    try {\n      const response = await fetch('/api/results/share', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ sessionId: results.sessionId })\n      });\n      \n      const { shareToken } = await response.json();\n      const url = `${window.location.origin}/assessment/results?session=${results.sessionId}&share=${shareToken}`;\n      setShareUrl(url);\n    } catch (error) {\n      console.error('Share URL generation failed:', error);\n    } finally {\n      setIsGenerating(false);\n    }\n  };\n\n  const copyToClipboard = async () => {\n    await navigator.clipboard.writeText(shareUrl);\n    setCopied(true);\n    setTimeout(() => setCopied(false), 2000);\n  };\n\n  const shareToSocial = (platform: 'linkedin' | 'twitter') => {\n    const text = `I just completed the AI Reality Check and scored ${results.totalScore}/100. Check your AI readiness:`;\n    const url = encodeURIComponent(shareUrl);\n    \n    const socialUrls = {\n      linkedin: `https://www.linkedin.com/sharing/share-offsite/?url=${url}&summary=${encodeURIComponent(text)}`,\n      twitter: `https://twitter.com/intent/tweet?text=${encodeURIComponent(text)}&url=${url}`\n    };\n    \n    window.open(socialUrls[platform], '_blank');\n    \n    trackEvent('social_share', {\n      platform,\n      sessionId: results.sessionId,\n      score: results.totalScore\n    });\n  };\n\n  useEffect(() => {\n    generateShareUrl();\n  }, []);\n\n  return (\n    <Modal onClose={onClose}>\n      <div className=\"share-modal p-6\">\n        <h3 className=\"text-xl font-bold mb-4\">Share Your AI Scorecard Results</h3>\n        \n        <div className=\"space-y-4\">\n          <div className=\"bg-gray-50 p-4 rounded-lg\">\n            <p className=\"text-gray-700 mb-2\">Your AI Readiness Score:</p>\n            <div className=\"flex items-center gap-3\">\n              <ScoreGauge score={results.totalScore} category={results.scoreCategory} size=\"small\" />\n              <div>\n                <div className=\"text-2xl font-bold\">{results.totalScore}/100</div>\n                <div className=\"text-gray-600\">{getCategoryLabel(results.scoreCategory)}</div>\n              </div>\n            </div>\n          </div>\n          \n          {shareUrl && (\n            <div className=\"space-y-3\">\n              <div className=\"flex gap-2\">\n                <input\n                  type=\"text\"\n                  value={shareUrl}\n                  readOnly\n                  className=\"flex-1 px-3 py-2 border border-gray-300 rounded-md bg-gray-50\"\n                />\n                <button\n                  onClick={copyToClipboard}\n                  className=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700\"\n                >\n                  {copied ? 'Copied!' : 'Copy'}\n                </button>\n              </div>\n              \n              <div className=\"flex gap-3\">\n                <button\n                  onClick={() => shareToSocial('linkedin')}\n                  className=\"flex-1 bg-blue-700 text-white px-4 py-2 rounded-md hover:bg-blue-800\"\n                >\n                  Share on LinkedIn\n                </button>\n                <button\n                  onClick={() => shareToSocial('twitter')}\n                  className=\"flex-1 bg-blue-400 text-white px-4 py-2 rounded-md hover:bg-blue-500\"\n                >\n                  Share on Twitter\n                </button>\n              </div>\n            </div>\n          )}\n          \n          {isGenerating && (\n            <div className=\"text-center py-4\">\n              <div className=\"animate-spin w-6 h-6 border-2 border-blue-600 border-t-transparent rounded-full mx-auto mb-2\" />\n              <p className=\"text-gray-600\">Generating shareable link...</p>\n            </div>\n          )}\n        </div>\n      </div>\n    </Modal>\n  );\n}\n```\n\n**Executive Briefing Qualification Logic:**\n```typescript\n// lib/qualification/executive-briefing.ts\ninterface QualificationCriteria {\n  minScore: number;\n  requiredFields: (keyof AssessmentData)[];\n  companyRequirements: {\n    minEmployees?: number;\n    validIndustries?: string[];\n    excludedDomains?: string[];\n  };\n}\n\nconst QUALIFICATION_CRITERIA: Record<QualificationLevel, QualificationCriteria> = {\n  basic: {\n    minScore: 0,\n    requiredFields: [],\n    companyRequirements: {}\n  },\n  enhanced: {\n    minScore: 30,\n    requiredFields: ['email'],\n    companyRequirements: {}\n  },\n  qualified: {\n    minScore: 50,\n    requiredFields: ['email', 'firstName', 'company'],\n    companyRequirements: {\n      minEmployees: 10\n    }\n  },\n  executive_briefing_qualified: {\n    minScore: 60,\n    requiredFields: ['email', 'firstName', 'lastName', 'company', 'title', 'phone'],\n    companyRequirements: {\n      minEmployees: 50,\n      excludedDomains: ['gmail.com', 'yahoo.com', 'hotmail.com', 'outlook.com']\n    }\n  }\n};\n\nexport function determineQualificationLevel(assessment: AssessmentData): QualificationLevel {\n  const levels: QualificationLevel[] = ['executive_briefing_qualified', 'qualified', 'enhanced', 'basic'];\n  \n  for (const level of levels) {\n    if (meetsQualificationCriteria(assessment, level)) {\n      return level;\n    }\n  }\n  \n  return 'basic';\n}\n\nfunction meetsQualificationCriteria(assessment: AssessmentData, level: QualificationLevel): boolean {\n  const criteria = QUALIFICATION_CRITERIA[level];\n  \n  // Check minimum score\n  if (assessment.totalScore < criteria.minScore) {\n    return false;\n  }\n  \n  // Check required fields\n  for (const field of criteria.requiredFields) {\n    if (!assessment[field] || assessment[field].trim() === '') {\n      return false;\n    }\n  }\n  \n  // Check company requirements\n  if (criteria.companyRequirements.minEmployees && \n      assessment.companySize < criteria.companyRequirements.minEmployees) {\n    return false;\n  }\n  \n  if (criteria.companyRequirements.excludedDomains && assessment.email) {\n    const emailDomain = assessment.email.split('@')[1]?.toLowerCase();\n    if (criteria.companyRequirements.excludedDomains.includes(emailDomain)) {\n      return false;\n    }\n  }\n  \n  return true;\n}\n```\n\n**TDD IMPLEMENTATION APPROACH:**\n\n**RED Phase - Write Failing Tests:**\n```typescript\n// tests/components/results/PdfDownloadModal.test.tsx\ndescribe('PDF Download Modal', () => {\n  test('should generate and download PDF report', async () => {\n    const mockResults = createMockResults();\n    const mockBlob = new Blob(['pdf content'], { type: 'application/pdf' });\n    \n    global.fetch = jest.fn().mockResolvedValue({\n      ok: true,\n      blob: () => Promise.resolve(mockBlob)\n    });\n    \n    render(<PdfDownloadModal results={mockResults} onClose={jest.fn()} />);\n    \n    await user.click(screen.getByText('Download PDF Report'));\n    \n    expect(fetch).toHaveBeenCalledWith('/api/results/generate-pdf', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ sessionId: mockResults.sessionId })\n    });\n  });\n});\n\n// tests/components/results/ShareModal.test.tsx\ndescribe('Share Modal', () => {\n  test('should generate shareable URL and copy to clipboard', async () => {\n    const mockResults = createMockResults();\n    \n    global.fetch = jest.fn().mockResolvedValue({\n      json: () => Promise.resolve({ shareToken: 'test-token' })\n    });\n    \n    Object.assign(navigator, {\n      clipboard: {\n        writeText: jest.fn().mockResolvedValue(undefined)\n      }\n    });\n    \n    render(<ShareModal results={mockResults} onClose={jest.fn()} />);\n    \n    await waitFor(() => {\n      expect(screen.getByDisplayValue(/assessment\\/results\\?session=/)).toBeInTheDocument();\n    });\n    \n    await user.click(screen.getByText('Copy'));\n    \n    expect(navigator.clipboard.writeText).toHaveBeenCalled();\n    expect(screen.getByText('Copied!')).toBeInTheDocument();\n  });\n});\n\n// tests/lib/qualification/executive-briefing.test.tsx\ndescribe('Executive Briefing Qualification', () => {\n  test('should qualify for executive briefing with complete data and high score', () => {\n    const assessment = {\n      totalScore: 75,\n      email: 'john@company.com',\n      firstName: 'John',\n      lastName: 'Doe',\n      company: 'Tech Corp',\n      title: 'CTO',\n      phone: '+1234567890',\n      companySize: 100\n    };\n    \n    expect(determineQualificationLevel(assessment)).toBe('executive_briefing_qualified');\n  });\n  \n  test('should not qualify with personal email domain', () => {\n    const assessment = {\n      totalScore: 85,\n      email: 'john@gmail.com',\n      firstName: 'John',\n      lastName: 'Doe',\n      company: 'Tech Corp',\n      title: 'CTO',\n      phone: '+1234567890',\n      companySize: 100\n    };\n    \n    expect(determineQualificationLevel(assessment)).toBe('qualified');\n  });\n});\n```\n\n**GREEN Phase - Minimal Implementation:**\n- Basic PDF generation without styling\n- Simple share URL generation\n- Basic qualification logic without edge cases\n- Minimal progressive value delivery\n\n**REFACTOR Phase - Production Ready:**\n- Professional PDF styling and branding\n- Advanced social sharing with preview cards\n- Comprehensive qualification logic with validation\n- Full progressive value delivery implementation\n- Performance optimization for PDF generation\n\n**KEY FILES TO CREATE:**\n- /app/assessment/results/page.tsx - Results page with tier-based rendering\n- /components/results/PdfDownloadModal.tsx - PDF download interface\n- /components/results/ShareModal.tsx - Social sharing functionality\n- /app/api/results/generate-pdf/route.ts - PDF generation endpoint\n- /app/api/results/share/route.ts - Share URL generation\n- /lib/qualification/executive-briefing.ts - Qualification logic\n- /lib/pdf/report-generator.ts - PDF report generation\n- /types/results.ts - Results tier definitions\n- /tests/components/results/ - Comprehensive results testing\n- /tests/lib/qualification/ - Qualification logic tests",
        "testStrategy": "TDD approach with progressive value delivery testing: 1) RED phase tests for tier-based component rendering and PDF generation, 2) Validate executive briefing qualification logic with edge cases, 3) Test social sharing URL generation and clipboard functionality, 4) Verify progressive value delivery restrictions by tier, 5) GREEN phase implements minimal PDF/sharing features, 6) REFACTOR phase adds professional styling, advanced sharing, and performance optimization",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "Email Automation & Templates",
        "description": "Build comprehensive email automation system with React Email templates, delivery tracking, A/B testing for subject lines, and follow-up sequences. Implement robust email service integration with Resend/SendGrid and TDD-driven template development with incomplete assessment recovery emails and optimized send timing.",
        "status": "pending",
        "dependencies": [],
        "priority": "medium",
        "details": "**EMAIL AUTOMATION IMPLEMENTATION:**\n\n**Email Service Architecture:**\n- React Email for template development with TypeScript support\n- Resend or SendGrid integration with failover capability\n- Email delivery tracking and bounce handling\n- A/B testing framework for subject lines and content\n- Follow-up sequence automation based on engagement\n- Incomplete assessment recovery email sequences\n- Send timing optimization based on recipient behavior\n\n**Email Template Reference:**\n- Primary source: /workspaces/ai-scorecard/implementation-spec/email-templates.md\n- Contains ALL email types including follow-up sequence timing specifications\n- Defines complete template structure for assessment results, reminders, and recovery emails\n- Specifies A/B testing variants for all email types\n\n**Email Templates with React Email:**\n```typescript\n// emails/assessment-results.tsx\ninterface AssessmentResultsEmailProps {\n  firstName?: string;\n  totalScore: number;\n  scoreCategory: ScoreCategory;\n  scoreBreakdown: ScoreBreakdown;\n  recommendations: string[];\n  resultsUrl: string;\n  unsubscribeUrl: string;\n  abTestVariant: 'standard' | 'personalized' | 'urgent';\n}\n\nexport function AssessmentResultsEmail({\n  firstName,\n  totalScore,\n  scoreCategory,\n  scoreBreakdown,\n  recommendations,\n  resultsUrl,\n  unsubscribeUrl,\n  abTestVariant\n}: AssessmentResultsEmailProps) {\n  const greeting = firstName ? `Hi ${firstName}` : 'Hello';\n  const categoryColor = getCategoryColor(scoreCategory);\n  const categoryLabel = getCategoryLabel(scoreCategory);\n\n  return (\n    <Html>\n      <Head />\n      <Preview>\n        Your AI Reality Check results are ready - {categoryLabel} (Score: {totalScore}/100)\n      </Preview>\n      <Body style={main}>\n        <Container style={container}>\n          {/* Header */}\n          <Section style={header}>\n            <Img\n              src=\"https://aireadycheck.com/logo.png\"\n              width=\"150\"\n              height=\"40\"\n              alt=\"AI Reality Check\"\n              style={logo}\n            />\n          </Section>\n\n          {/* Results Summary */}\n          <Section style={content}>\n            <Heading style={h1}>{greeting}, Your AI Reality Check Results Are Ready</Heading>\n            \n            <div style={{ textAlign: 'center', margin: '32px 0' }}>\n              <div style={{\n                ...scoreCircle,\n                borderColor: categoryColor,\n                backgroundColor: `${categoryColor}10`\n              }}>\n                <Text style={{ ...scoreText, color: categoryColor }}>\n                  {totalScore}/100\n                </Text>\n              </div>\n              <Text style={{ ...categoryText, color: categoryColor }}>\n                {categoryLabel}\n              </Text>\n            </div>\n\n            {abTestVariant === 'urgent' && scoreCategory === 'crisis' && (\n              <Section style={urgentBanner}>\n                <Text style={urgentText}>\n                  ⚠️ Critical Issues Detected - Immediate Action Recommended\n                </Text>\n              </Section>\n            )}\n\n            <Text style={paragraph}>\n              Based on your responses across 4 critical AI readiness areas, \n              we've identified specific opportunities to strengthen your AI implementation.\n            </Text>\n\n            {/* Score Breakdown */}\n            <Section style={scoreBreakdownSection}>\n              <Heading style={h2}>Your Score Breakdown</Heading>\n              {Object.entries(scoreBreakdown).map(([area, score]) => (\n                <Row key={area} style={scoreRow}>\n                  <Column style={scoreLabel}>\n                    <Text style={scoreAreaText}>\n                      {getAreaDisplayName(area)}\n                    </Text>\n                  </Column>\n                  <Column style={scoreValue}>\n                    <Text style={{ ...scoreValueText, color: getScoreColor(score) }}>\n                      {score}%\n                    </Text>\n                  </Column>\n                </Row>\n              ))}\n            </Section>\n\n            {/* Top Recommendations */}\n            <Section style={recommendationsSection}>\n              <Heading style={h2}>Priority Recommendations</Heading>\n              {recommendations.slice(0, 3).map((rec, index) => (\n                <Text key={index} style={recommendationItem}>\n                  • {rec}\n                </Text>\n              ))}\n            </Section>\n\n            {/* CTA */}\n            <Section style={ctaSection}>\n              <Button \n                href={resultsUrl}\n                style={{ ...button, backgroundColor: categoryColor }}\n              >\n                View Complete Results & Action Plan\n              </Button>\n            </Section>\n\n            {abTestVariant === 'personalized' && (\n              <Section style={personalizedSection}>\n                <Text style={personalizedText}>\n                  We've prepared additional insights specific to your {scoreCategory} category. \n                  These include industry benchmarks and step-by-step improvement strategies.\n                </Text>\n              </Section>\n            )}\n          </Section>\n\n          {/* Footer */}\n          <Section style={footer}>\n            <Text style={footerText}>\n              This assessment was completed on {new Date().toLocaleDateString()}.\n              <br />\n              <Link href={unsubscribeUrl} style={unsubscribeLink}>\n                Unsubscribe\n              </Link>\n            </Text>\n          </Section>\n        </Container>\n      </Body>\n    </Html>\n  );\n}\n```\n\n**Incomplete Assessment Recovery Email Template:**\n```typescript\n// emails/incomplete-recovery.tsx\ninterface IncompleteRecoveryEmailProps {\n  firstName?: string;\n  resumeUrl: string;\n  questionsCompleted: number;\n  totalQuestions: number;\n  unsubscribeUrl: string;\n  abTestVariant: 'gentle' | 'urgent' | 'value_focused';\n  timingOptimized: boolean;\n}\n\nexport function IncompleteRecoveryEmail({\n  firstName,\n  resumeUrl,\n  questionsCompleted,\n  totalQuestions,\n  unsubscribeUrl,\n  abTestVariant,\n  timingOptimized\n}: IncompleteRecoveryEmailProps) {\n  const progress = Math.round((questionsCompleted / totalQuestions) * 100);\n  const remainingQuestions = totalQuestions - questionsCompleted;\n  \n  const subjectLines = {\n    gentle: [\n      `Your AI Reality Check is ${progress}% complete`,\n      `${firstName || 'Hi there'}, finish your AI assessment in 2 minutes`,\n      `Complete your AI readiness evaluation`\n    ],\n    urgent: [\n      `⏰ Don't lose your AI assessment progress (${progress}% done)`,\n      `${firstName || 'Executive'}, your AI evaluation expires soon`,\n      `🚨 Complete your AI Reality Check before it expires`\n    ],\n    value_focused: [\n      `Get your personalized AI strategy report`,\n      `${firstName || 'Hi'}, your AI improvement roadmap is waiting`,\n      `Unlock your AI readiness insights (${remainingQuestions} questions left)`\n    ]\n  };\n\n  return (\n    <Html>\n      <Head />\n      <Preview>\n        Complete your AI Reality Check assessment - only {remainingQuestions} questions remaining\n      </Preview>\n      <Body style={main}>\n        <Container style={container}>\n          <Section style={header}>\n            <Img\n              src=\"https://aireadycheck.com/logo.png\"\n              width=\"150\"\n              height=\"40\"\n              alt=\"AI Reality Check\"\n              style={logo}\n            />\n          </Section>\n\n          <Section style={content}>\n            <Heading style={h1}>\n              {firstName ? `Hi ${firstName}` : 'Hello'}, You're Almost Done!\n            </Heading>\n            \n            <div style={{ textAlign: 'center', margin: '32px 0' }}>\n              <div style={progressBar}>\n                <div style={{ \n                  ...progressFill, \n                  width: `${progress}%`,\n                  backgroundColor: timingOptimized ? '#10B981' : '#3B82F6'\n                }}>\n                </div>\n              </div>\n              <Text style={progressText}>\n                {progress}% Complete - Only {remainingQuestions} questions left\n              </Text>\n            </div>\n\n            {abTestVariant === 'value_focused' && (\n              <Section style={valueProposition}>\n                <Text style={valueText}>\n                  🎯 Your personalized AI strategy report is ready to generate\n                  <br />\n                  📊 Get industry benchmarks and actionable recommendations\n                  <br />\n                  ⚡ Takes less than 2 minutes to complete\n                </Text>\n              </Section>\n            )}\n\n            <Text style={paragraph}>\n              You're so close to getting your complete AI Reality Check results and \n              personalized improvement recommendations.\n            </Text>\n\n            {timingOptimized && (\n              <Section style={timingNote}>\n                <Text style={timingText}>\n                  📅 This email was sent at your optimal engagement time based on previous interactions\n                </Text>\n              </Section>\n            )}\n\n            <Section style={ctaSection}>\n              <Button href={resumeUrl} style={primaryButton}>\n                Complete My Assessment\n              </Button>\n            </Section>\n\n            {abTestVariant === 'urgent' && (\n              <Section style={urgencySection}>\n                <Text style={urgencyText}>\n                  ⚠️ Your assessment session will expire in 48 hours. \n                  Complete it now to secure your results.\n                </Text>\n              </Section>\n            )}\n          </Section>\n\n          <Section style={footer}>\n            <Text style={footerText}>\n              <Link href={unsubscribeUrl} style={unsubscribeLink}>\n                Unsubscribe\n              </Link>\n            </Text>\n          </Section>\n        </Container>\n      </Body>\n    </Html>\n  );\n}\n```\n\n**Enhanced Email Service with A/B Testing & Timing Optimization:**\n```typescript\n// lib/services/email.ts\nexport class EmailService {\n  private resend: Resend;\n  private fallbackProvider?: SendGridService;\n  private timingOptimizer: SendTimingOptimizer;\n  private abTestTracker: ABTestTracker;\n  \n  constructor() {\n    this.resend = new Resend(process.env.RESEND_API_KEY);\n    if (process.env.SENDGRID_API_KEY) {\n      this.fallbackProvider = new SendGridService(process.env.SENDGRID_API_KEY);\n    }\n    this.timingOptimizer = new SendTimingOptimizer();\n    this.abTestTracker = new ABTestTracker();\n  }\n\n  async sendIncompleteRecoveryEmail(\n    email: string,\n    templateData: IncompleteRecoveryEmailData,\n    options: EmailOptions = {}\n  ): Promise<EmailResult> {\n    const abTestVariant = this.getRecoveryABTestVariant(email, templateData);\n    const optimalTiming = await this.timingOptimizer.getOptimalSendTime(email);\n    const timingOptimized = optimalTiming.confidence > 0.7;\n    \n    // Schedule for optimal time if significant improvement expected\n    if (timingOptimized && optimalTiming.recommendedTime > new Date()) {\n      return await this.scheduleEmail({\n        type: 'incomplete_recovery',\n        email,\n        templateData: { ...templateData, timingOptimized: true },\n        abTestVariant,\n        scheduledFor: optimalTiming.recommendedTime\n      });\n    }\n\n    const subject = this.generateRecoverySubject(templateData, abTestVariant);\n    \n    try {\n      const html = render(IncompleteRecoveryEmail({\n        ...templateData,\n        abTestVariant,\n        timingOptimized\n      }));\n      const text = render(IncompleteRecoveryEmail({\n        ...templateData,\n        abTestVariant,\n        timingOptimized\n      }), { plainText: true });\n\n      const result = await this.resend.emails.send({\n        from: 'Stuart Rench <stuart@aireadycheck.com>',\n        to: email,\n        subject,\n        html,\n        text,\n        headers: {\n          'X-Assessment-ID': templateData.assessmentId,\n          'X-AB-Variant': abTestVariant,\n          'X-Timing-Optimized': timingOptimized.toString(),\n          'X-Email-Type': 'incomplete_recovery',\n          'List-Unsubscribe': `<${templateData.unsubscribeUrl}>`\n        },\n        tags: [\n          { name: 'type', value: 'incomplete_recovery' },\n          { name: 'variant', value: abTestVariant },\n          { name: 'timing_optimized', value: timingOptimized.toString() },\n          { name: 'progress', value: `${templateData.questionsCompleted}/${templateData.totalQuestions}` }\n        ]\n      });\n\n      await this.trackEmailSent(email, 'incomplete_recovery', result.id, abTestVariant, {\n        timingOptimized,\n        progress: templateData.questionsCompleted / templateData.totalQuestions\n      });\n      \n      await this.abTestTracker.recordVariant(email, 'incomplete_recovery', abTestVariant);\n      \n      return { success: true, messageId: result.id, provider: 'resend' };\n\n    } catch (error) {\n      console.error('Recovery email send failed:', error);\n      \n      if (this.fallbackProvider) {\n        try {\n          const fallbackResult = await this.fallbackProvider.send({\n            to: email,\n            subject,\n            html,\n            text,\n            templateData,\n            abTestVariant\n          });\n          \n          await this.trackEmailSent(email, 'incomplete_recovery', fallbackResult.messageId, abTestVariant);\n          \n          return { success: true, messageId: fallbackResult.messageId, provider: 'sendgrid' };\n        } catch (fallbackError) {\n          console.error('Fallback recovery email send failed:', fallbackError);\n        }\n      }\n\n      await this.queueEmailForRetry(email, templateData, options);\n      throw new Error(`Recovery email delivery failed: ${error.message}`);\n    }\n  }\n\n  private getRecoveryABTestVariant(\n    email: string, \n    data: IncompleteRecoveryEmailData\n  ): RecoveryABTestVariant {\n    const hash = crypto.createHash('md5').update(email + data.assessmentId).digest('hex');\n    const hashValue = parseInt(hash.substring(0, 8), 16);\n    const percentage = hashValue % 100;\n    \n    // Weight variants based on completion progress\n    const progress = data.questionsCompleted / data.totalQuestions;\n    \n    if (progress < 0.3) {\n      // Early abandonment - focus on value\n      if (percentage < 50) return 'value_focused';\n      if (percentage < 80) return 'gentle';\n      return 'urgent';\n    } else {\n      // High progress - gentle nudge preferred\n      if (percentage < 60) return 'gentle';\n      if (percentage < 85) return 'value_focused';\n      return 'urgent';\n    }\n  }\n\n  private generateRecoverySubject(\n    data: IncompleteRecoveryEmailData, \n    variant: RecoveryABTestVariant\n  ): string {\n    const progress = Math.round((data.questionsCompleted / data.totalQuestions) * 100);\n    const remaining = data.totalQuestions - data.questionsCompleted;\n    \n    const subjectVariants = {\n      gentle: [\n        `Your AI Reality Check is ${progress}% complete`,\n        `${data.firstName || 'Hi there'}, finish your AI assessment in 2 minutes`,\n        `Complete your AI readiness evaluation`\n      ],\n      urgent: [\n        `⏰ Don't lose your AI assessment progress (${progress}% done)`,\n        `${data.firstName || 'Executive'}, your AI evaluation expires soon`,\n        `🚨 Complete your AI Reality Check before it expires`\n      ],\n      value_focused: [\n        `Get your personalized AI strategy report`,\n        `${data.firstName || 'Hi'}, your AI improvement roadmap is waiting`,\n        `Unlock your AI readiness insights (${remaining} questions left)`\n      ]\n    };\n\n    const variants = subjectVariants[variant];\n    const variantIndex = this.getVariantIndex(data.email, variants.length);\n    \n    return variants[variantIndex];\n  }\n}\n```\n\n**Follow-up Email Automation with Recovery Sequences:**\n```typescript\n// lib/automation/email-sequences.ts\nexport class EmailSequenceAutomation {\n  private emailService: EmailService;\n  private scheduleService: ScheduleService;\n  \n  async startIncompleteRecoverySequence(\n    assessmentId: string,\n    questionsCompleted: number,\n    totalQuestions: number\n  ): Promise<void> {\n    const assessment = await prisma.assessment.findUnique({\n      where: { id: assessmentId },\n      include: { emailTracking: true }\n    });\n\n    if (!assessment || !assessment.email || assessment.completedAt) return;\n\n    // Reference timing from email-templates.md specification\n    const recoverySchedule = this.getRecoveryScheduleFromSpec(questionsCompleted, totalQuestions);\n    \n    // Schedule recovery emails based on completion progress\n    for (const timing of recoverySchedule) {\n      await this.scheduleService.schedule({\n        type: 'incomplete_recovery',\n        assessmentId: assessment.id,\n        executeAt: new Date(Date.now() + timing.delayMs),\n        data: {\n          questionsCompleted,\n          totalQuestions,\n          resumeUrl: `/assessment/resume?session=${assessment.sessionId}`,\n          urgencyLevel: timing.urgencyLevel,\n          enableTimingOptimization: timing.optimizeTiming\n        }\n      });\n    }\n\n    // Track recovery sequence initiation\n    await prisma.emailSequence.create({\n      data: {\n        assessmentId,\n        type: 'incomplete_recovery',\n        progress: questionsCompleted / totalQuestions,\n        scheduledEmails: recoverySchedule.length,\n        status: 'active'\n      }\n    });\n  }\n\n  private getRecoveryScheduleFromSpec(\n    completed: number,\n    total: number\n  ): RecoveryScheduleTiming[] {\n    const progress = completed / total;\n    \n    // Reference /workspaces/ai-scorecard/implementation-spec/email-templates.md\n    // for complete timing specifications\n    \n    if (progress < 0.25) {\n      // Early abandonment - aggressive recovery\n      return [\n        { delayMs: 2 * 60 * 60 * 1000, urgencyLevel: 'gentle', optimizeTiming: true }, // 2 hours\n        { delayMs: 24 * 60 * 60 * 1000, urgencyLevel: 'value_focused', optimizeTiming: true }, // 1 day\n        { delayMs: 72 * 60 * 60 * 1000, urgencyLevel: 'urgent', optimizeTiming: false } // 3 days\n      ];\n    } else if (progress < 0.75) {\n      // Mid-progress abandonment - moderate recovery\n      return [\n        { delayMs: 4 * 60 * 60 * 1000, urgencyLevel: 'gentle', optimizeTiming: true }, // 4 hours\n        { delayMs: 48 * 60 * 60 * 1000, urgencyLevel: 'value_focused', optimizeTiming: true } // 2 days\n      ];\n    } else {\n      // Near completion - single gentle nudge\n      return [\n        { delayMs: 6 * 60 * 60 * 1000, urgencyLevel: 'gentle', optimizeTiming: true } // 6 hours\n      ];\n    }\n  }\n}\n```\n\n**Delivery Tracking Integration:**\n```typescript\n// lib/services/email-tracking.ts\nexport class EmailTrackingService {\n  async trackEmailDelivery(messageId: string, event: EmailEvent): Promise<void> {\n    await prisma.emailTracking.upsert({\n      where: { messageId },\n      update: {\n        status: event.type,\n        deliveredAt: event.type === 'delivered' ? new Date() : undefined,\n        openedAt: event.type === 'opened' ? new Date() : undefined,\n        clickedAt: event.type === 'clicked' ? new Date() : undefined,\n        bouncedAt: event.type === 'bounced' ? new Date() : undefined,\n        metadata: event.data\n      },\n      create: {\n        messageId,\n        assessmentId: event.assessmentId,\n        emailType: event.emailType,\n        abTestVariant: event.abTestVariant,\n        status: event.type,\n        sentAt: new Date(),\n        deliveredAt: event.type === 'delivered' ? new Date() : undefined,\n        metadata: event.data\n      }\n    });\n\n    // Update A/B test performance metrics\n    if (event.type === 'opened' || event.type === 'clicked') {\n      await this.updateABTestMetrics(messageId, event);\n    }\n  }\n\n  private async updateABTestMetrics(messageId: string, event: EmailEvent): Promise<void> {\n    const tracking = await prisma.emailTracking.findUnique({\n      where: { messageId }\n    });\n\n    if (!tracking) return;\n\n    await prisma.abTestMetrics.upsert({\n      where: {\n        emailType_variant: {\n          emailType: tracking.emailType,\n          variant: tracking.abTestVariant\n        }\n      },\n      update: {\n        totalSent: { increment: 0 },\n        totalOpened: event.type === 'opened' ? { increment: 1 } : undefined,\n        totalClicked: event.type === 'clicked' ? { increment: 1 } : undefined,\n        lastUpdated: new Date()\n      },\n      create: {\n        emailType: tracking.emailType,\n        variant: tracking.abTestVariant,\n        totalSent: 1,\n        totalOpened: event.type === 'opened' ? 1 : 0,\n        totalClicked: event.type === 'clicked' ? 1 : 0,\n        lastUpdated: new Date()\n      }\n    });\n  }\n}\n```\n\n**TDD IMPLEMENTATION APPROACH:**\n\n**RED Phase - Write Failing Tests:**\n```typescript\n// tests/services/incomplete-recovery.test.ts\ndescribe('Incomplete Recovery Email Service', () => {\n  test('should send recovery email with correct variant based on progress', async () => {\n    const mockData = {\n      assessmentId: 'test-123',\n      email: 'test@company.com',\n      firstName: 'John',\n      questionsCompleted: 8,\n      totalQuestions: 16,\n      resumeUrl: 'https://test.com/resume',\n      unsubscribeUrl: 'https://test.com/unsubscribe'\n    };\n    \n    const result = await emailService.sendIncompleteRecoveryEmail(\n      mockData.email,\n      mockData\n    );\n    \n    expect(result.success).toBe(true);\n    expect(result.messageId).toBeDefined();\n    \n    // Verify A/B test tracking\n    const abTestRecord = await prisma.abTestMetrics.findFirst({\n      where: { emailType: 'incomplete_recovery' }\n    });\n    expect(abTestRecord).toBeDefined();\n  });\n\n  test('should schedule email for optimal timing when confidence is high', async () => {\n    mockTimingOptimizer.getOptimalSendTime.mockResolvedValue({\n      recommendedTime: new Date(Date.now() + 3600000), // 1 hour from now\n      confidence: 0.8,\n      reason: 'historical_engagement'\n    });\n    \n    const result = await emailService.sendIncompleteRecoveryEmail(\n      'test@company.com',\n      mockRecoveryData\n    );\n    \n    expect(result.scheduled).toBe(true);\n    expect(mockScheduleService.schedule).toHaveBeenCalled();\n  });\n\n  test('should create recovery sequence based on email-templates.md spec', async () => {\n    const emailSequence = new EmailSequenceAutomation();\n    \n    await emailSequence.startIncompleteRecoverySequence('test-123', 4, 16);\n    \n    const scheduledEmails = await prisma.scheduledEmail.findMany({\n      where: { assessmentId: 'test-123', type: 'incomplete_recovery' }\n    });\n    \n    // Early abandonment should have 3 scheduled emails\n    expect(scheduledEmails).toHaveLength(3);\n    expect(scheduledEmails[0].urgencyLevel).toBe('gentle');\n    expect(scheduledEmails[1].urgencyLevel).toBe('value_focused');\n    expect(scheduledEmails[2].urgencyLevel).toBe('urgent');\n  });\n});\n```\n\n**KEY FILES TO CREATE:**\n- /emails/assessment-results.tsx - Main results email template\n- /emails/incomplete-recovery.tsx - Recovery email for incomplete assessments\n- /emails/deep-insights.tsx - Advanced insights email\n- /lib/services/email.ts - Enhanced email service with A/B testing\n- /lib/services/email-tracking.ts - Delivery tracking and metrics\n- /lib/services/send-timing-optimizer.ts - Optimal send time calculation\n- /lib/automation/email-sequences.ts - Complete automation including recovery\n- /app/api/email/send/route.ts - Email sending API endpoint\n- /app/api/email/webhook/route.ts - Email delivery webhooks\n- /lib/ab-testing/email-variants.ts - A/B testing logic\n- /tests/services/email.test.ts - Email service tests\n- /tests/services/incomplete-recovery.test.ts - Recovery email tests\n- /tests/emails/ - All email template tests\n- /tests/automation/email-sequences.test.ts - Sequence automation tests",
        "testStrategy": "Comprehensive TDD approach with specification-driven testing: 1) RED phase tests referencing /workspaces/ai-scorecard/implementation-spec/email-templates.md for all email types and timing, 2) Unit tests for A/B testing variants and subject line generation (80%+ coverage), 3) Integration tests for Resend/SendGrid failover and delivery tracking, 4) Tests for incomplete recovery sequences based on progress levels, 5) Send timing optimization validation tests, 6) GREEN phase minimal implementation, 7) REFACTOR phase with production-ready templates and advanced analytics, 8) End-to-end tests for complete email automation workflows including recovery sequences.",
        "subtasks": []
      },
      {
        "id": 11,
        "title": "Analytics & Performance Tracking",
        "description": "Implement comprehensive analytics system with privacy-compliant tracking, performance monitoring, conversion funnel analysis, and business intelligence dashboard. Build TDD-driven analytics infrastructure that supports A/B testing and provides actionable insights for optimization.",
        "status": "pending",
        "dependencies": [],
        "priority": "medium",
        "details": "**ANALYTICS & PERFORMANCE IMPLEMENTATION:**\n\n**Analytics Architecture:**\n- Privacy-compliant event tracking without PII storage\n- Real-time performance monitoring with alerts\n- Conversion funnel analysis and optimization insights\n- A/B testing results tracking and statistical significance\n- Business intelligence dashboard for stakeholders\n- KPI compliance tracking (>70% completion rate, >15% executive briefing conversion)\n- Real-time metrics and error tracking\n\n**Event Tracking System:**\n```typescript\n// lib/analytics/tracking.ts\ninterface AnalyticsEvent {\n  event: string;\n  properties: Record<string, any>;\n  timestamp: Date;\n  sessionId?: string;\n  userId?: string; // Hashed for privacy\n}\n\nexport class AnalyticsService {\n  private events: AnalyticsEvent[] = [];\n  private batchSize = 50;\n  private flushInterval = 30000; // 30 seconds\n  \n  constructor() {\n    this.startBatchProcessor();\n  }\n\n  track(event: string, properties: Record<string, any> = {}, sessionId?: string): void {\n    const analyticsEvent: AnalyticsEvent = {\n      event,\n      properties: this.sanitizeProperties(properties),\n      timestamp: new Date(),\n      sessionId,\n      userId: properties.email ? this.hashEmail(properties.email) : undefined\n    };\n\n    this.events.push(analyticsEvent);\n    \n    if (this.events.length >= this.batchSize) {\n      this.flush();\n    }\n  }\n\n  // Core assessment funnel events\n  trackAssessmentStarted(sessionId: string, source?: string): void {\n    this.track('assessment_started', {\n      source: source || 'direct',\n      timestamp: Date.now()\n    }, sessionId);\n  }\n\n  trackStepCompleted(sessionId: string, step: number, timeSpent: number, responses: Record<string, string>): void {\n    this.track('assessment_step_completed', {\n      step,\n      timeSpent,\n      responseCount: Object.keys(responses).length,\n      hasHighRiskResponses: this.detectHighRiskResponses(responses, step)\n    }, sessionId);\n  }\n\n  trackEmailCaptured(sessionId: string, step: number, emailDomain: string): void {\n    this.track('email_captured', {\n      step,\n      emailDomain: emailDomain.toLowerCase(),\n      captureMethod: step === 0 ? 'initial' : 'progressive'\n    }, sessionId);\n  }\n\n  trackAssessmentCompleted(sessionId: string, results: AssessmentResults): void {\n    this.track('assessment_completed', {\n      totalScore: results.totalScore,\n      scoreCategory: results.scoreCategory,\n      completionTime: results.completionTime,\n      qualificationLevel: results.qualificationLevel,\n      areaScores: results.scoreBreakdown\n    }, sessionId);\n  }\n\n  trackExecutiveBriefingRequested(sessionId: string, method: string): void {\n    this.track('executive_briefing_requested', {\n      method, // 'cta_click', 'email_link', 'phone_call'\n      fromScoreCategory: this.getSessionScoreCategory(sessionId)\n    }, sessionId);\n  }\n\n  // Performance tracking\n  trackPerformanceMetric(metric: string, value: number, context?: Record<string, any>): void {\n    this.track('performance_metric', {\n      metric,\n      value,\n      ...context\n    });\n  }\n\n  trackPageLoad(page: string, loadTime: number, sessionId?: string): void {\n    this.track('page_load', {\n      page,\n      loadTime,\n      isSlowLoad: loadTime > 2000,\n      connectionType: this.getConnectionType()\n    }, sessionId);\n  }\n\n  // A/B testing events\n  trackABTestAssignment(testName: string, variant: string, sessionId?: string): void {\n    this.track('ab_test_assignment', {\n      testName,\n      variant\n    }, sessionId);\n  }\n\n  trackABTestConversion(testName: string, variant: string, conversionType: string, sessionId?: string): void {\n    this.track('ab_test_conversion', {\n      testName,\n      variant,\n      conversionType\n    }, sessionId);\n  }\n\n  // Error tracking\n  trackError(error: Error, context?: Record<string, any>, sessionId?: string): void {\n    this.track('error_occurred', {\n      errorName: error.name,\n      errorMessage: error.message,\n      errorStack: error.stack?.substring(0, 1000), // Truncate for storage\n      ...context\n    }, sessionId);\n  }\n\n  private async flush(): Promise<void> {\n    if (this.events.length === 0) return;\n\n    const eventsToSend = this.events.splice(0, this.batchSize);\n    \n    try {\n      await fetch('/api/analytics/events', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ events: eventsToSend })\n      });\n    } catch (error) {\n      console.error('Analytics flush failed:', error);\n      this.trackError(error, { context: 'analytics_flush_failed' });\n      // Re-queue events for retry\n      this.events.unshift(...eventsToSend);\n    }\n  }\n\n  private sanitizeProperties(properties: Record<string, any>): Record<string, any> {\n    const sanitized = { ...properties };\n    \n    // Remove PII\n    delete sanitized.email;\n    delete sanitized.firstName;\n    delete sanitized.lastName;\n    delete sanitized.phone;\n    \n    // Hash sensitive data\n    if (properties.email) {\n      sanitized.emailHash = this.hashEmail(properties.email);\n      sanitized.emailDomain = properties.email.split('@')[1]?.toLowerCase();\n    }\n    \n    if (properties.company) {\n      sanitized.companyHash = this.hashString(properties.company);\n    }\n\n    return sanitized;\n  }\n\n  private hashEmail(email: string): string {\n    return crypto.createHash('sha256').update(email.toLowerCase()).digest('hex');\n  }\n}\n```\n\n**Real-Time Dashboard Implementation:**\n```typescript\n// components/analytics/Dashboard.tsx\ninterface KPIMetrics {\n  completionRate: number; // Target >70%\n  executiveBriefingConversion: number; // Target >15%\n  pageLoadTime: number; // Target <2s\n  errorRate: number; // Target <2%\n  dailyCompletions: number;\n  avgAssessmentTime: number; // Target 8-10 minutes\n  mobileCompletionRate: number; // Target >65%\n}\n\nexport const Dashboard: React.FC = () => {\n  const [metrics, setMetrics] = useState<KPIMetrics | null>(null);\n  const [funnel, setFunnel] = useState<FunnelStage[]>([]);\n  const [abTests, setAbTests] = useState<ABTestResult[]>([]);\n  const [isRealTime, setIsRealTime] = useState(true);\n\n  useEffect(() => {\n    const fetchMetrics = async () => {\n      try {\n        const [metricsRes, funnelRes, abTestsRes] = await Promise.all([\n          fetch('/api/analytics/metrics'),\n          fetch('/api/analytics/funnel'),\n          fetch('/api/analytics/ab-tests')\n        ]);\n\n        setMetrics(await metricsRes.json());\n        setFunnel(await funnelRes.json());\n        setAbTests(await abTestsRes.json());\n      } catch (error) {\n        console.error('Failed to fetch analytics data:', error);\n      }\n    };\n\n    fetchMetrics();\n    \n    // Real-time updates\n    if (isRealTime) {\n      const interval = setInterval(fetchMetrics, 30000); // 30 seconds\n      return () => clearInterval(interval);\n    }\n  }, [isRealTime]);\n\n  return (\n    <div className=\"dashboard-container\">\n      <div className=\"kpi-grid\">\n        <KPICard\n          title=\"Completion Rate\"\n          value={metrics?.completionRate || 0}\n          target={70}\n          format=\"percentage\"\n          trend=\"up\"\n        />\n        <KPICard\n          title=\"Executive Briefing Conversion\"\n          value={metrics?.executiveBriefingConversion || 0}\n          target={15}\n          format=\"percentage\"\n          trend=\"up\"\n        />\n        <KPICard\n          title=\"Page Load Time\"\n          value={metrics?.pageLoadTime || 0}\n          target={2000}\n          format=\"milliseconds\"\n          trend=\"down\"\n        />\n        <KPICard\n          title=\"Error Rate\"\n          value={metrics?.errorRate || 0}\n          target={2}\n          format=\"percentage\"\n          trend=\"down\"\n        />\n      </div>\n      \n      <ConversionFunnelChart data={funnel} />\n      <ABTestResults tests={abTests} />\n      <RealTimeMetrics isEnabled={isRealTime} />\n    </div>\n  );\n};\n```\n\n**Conversion Funnel Analysis:**\n```typescript\n// lib/analytics/funnel.ts\nexport interface FunnelStage {\n  name: string;\n  count: number;\n  conversionRate: number;\n  dropoffRate: number;\n  avgTimeToNext?: number;\n  kpiTarget?: number; // Business requirement targets\n}\n\nexport class FunnelAnalyzer {\n  async getAssessmentFunnel(dateRange: DateRange): Promise<FunnelStage[]> {\n    const funnelData = await this.getFunnelData(dateRange);\n    \n    const stages: FunnelStage[] = [\n      {\n        name: 'Landing Page Visits',\n        count: funnelData.landingPageViews,\n        conversionRate: 100,\n        dropoffRate: 0,\n        kpiTarget: 60 // >60% should start assessment\n      },\n      {\n        name: 'Assessment Started',\n        count: funnelData.assessmentStarted,\n        conversionRate: (funnelData.assessmentStarted / funnelData.landingPageViews) * 100,\n        dropoffRate: ((funnelData.landingPageViews - funnelData.assessmentStarted) / funnelData.landingPageViews) * 100,\n        avgTimeToNext: funnelData.avgTimeToStep1,\n        kpiTarget: 70 // >70% completion rate\n      },\n      {\n        name: 'Step 1 Completed',\n        count: funnelData.step1Completed,\n        conversionRate: (funnelData.step1Completed / funnelData.assessmentStarted) * 100,\n        dropoffRate: ((funnelData.assessmentStarted - funnelData.step1Completed) / funnelData.assessmentStarted) * 100,\n        avgTimeToNext: funnelData.avgTimeStep1To2\n      },\n      {\n        name: 'Step 2 Completed',\n        count: funnelData.step2Completed,\n        conversionRate: (funnelData.step2Completed / funnelData.step1Completed) * 100,\n        dropoffRate: ((funnelData.step1Completed - funnelData.step2Completed) / funnelData.step1Completed) * 100,\n        avgTimeToNext: funnelData.avgTimeStep2To3\n      },\n      {\n        name: 'Assessment Completed',\n        count: funnelData.assessmentCompleted,\n        conversionRate: (funnelData.assessmentCompleted / funnelData.step2Completed) * 100,\n        dropoffRate: ((funnelData.step2Completed - funnelData.assessmentCompleted) / funnelData.step2Completed) * 100,\n        avgTimeToNext: funnelData.avgTimeToResults\n      },\n      {\n        name: 'Email Captured',\n        count: funnelData.emailCaptured,\n        conversionRate: (funnelData.emailCaptured / funnelData.assessmentCompleted) * 100,\n        dropoffRate: ((funnelData.assessmentCompleted - funnelData.emailCaptured) / funnelData.assessmentCompleted) * 100,\n        kpiTarget: 50 // >50% email capture rate\n      },\n      {\n        name: 'Executive Briefing Requested',\n        count: funnelData.briefingRequested,\n        conversionRate: (funnelData.briefingRequested / funnelData.emailCaptured) * 100,\n        dropoffRate: ((funnelData.emailCaptured - funnelData.briefingRequested) / funnelData.emailCaptured) * 100,\n        kpiTarget: 15 // >15% executive briefing conversion\n      }\n    ];\n\n    return stages;\n  }\n\n  async getKPICompliance(dateRange: DateRange): Promise<KPIStatus[]> {\n    const funnel = await this.getAssessmentFunnel(dateRange);\n    const performance = await this.getPerformanceMetrics(dateRange);\n    \n    return [\n      {\n        metric: 'Assessment Completion Rate',\n        current: funnel.find(s => s.name === 'Assessment Started')?.conversionRate || 0,\n        target: 70,\n        status: (funnel.find(s => s.name === 'Assessment Started')?.conversionRate || 0) >= 70 ? 'good' : 'warning'\n      },\n      {\n        metric: 'Executive Briefing Conversion',\n        current: funnel.find(s => s.name === 'Executive Briefing Requested')?.conversionRate || 0,\n        target: 15,\n        status: (funnel.find(s => s.name === 'Executive Briefing Requested')?.conversionRate || 0) >= 15 ? 'good' : 'critical'\n      },\n      {\n        metric: 'Page Load Time',\n        current: performance.avgPageLoadTime,\n        target: 2000,\n        status: performance.avgPageLoadTime <= 2000 ? 'good' : 'warning'\n      },\n      {\n        metric: 'Mobile Completion Rate',\n        current: performance.mobileCompletionRate,\n        target: 65,\n        status: performance.mobileCompletionRate >= 65 ? 'good' : 'warning'\n      }\n    ];\n  }\n}\n```\n\n**A/B Testing Results Tracking:**\n```typescript\n// lib/analytics/ab-testing.ts\nexport class ABTestTracker {\n  async getTestResults(testName: string): Promise<ABTestResult> {\n    const variants = await this.getTestVariants(testName);\n    const results: ABTestResult = {\n      testName,\n      startDate: variants[0].startDate,\n      status: this.getTestStatus(variants),\n      variants: variants.map(variant => ({\n        name: variant.name,\n        participants: variant.participants,\n        conversions: variant.conversions,\n        conversionRate: (variant.conversions / variant.participants) * 100,\n        confidence: this.calculateConfidence(variant, variants[0]),\n        isWinner: variant.isWinner || false\n      }))\n    };\n\n    // Statistical significance calculation\n    results.hasStatisticalSignificance = results.variants.some(v => v.confidence >= 95);\n    \n    return results;\n  }\n\n  async trackTestConversion(testName: string, variant: string, sessionId: string, conversionType: string): Promise<void> {\n    // Track the conversion event\n    await this.analytics.trackABTestConversion(testName, variant, conversionType, sessionId);\n    \n    // Update test statistics in real-time\n    await this.updateTestStatistics(testName, variant, conversionType);\n  }\n\n  private calculateConfidence(variant: TestVariant, control: TestVariant): number {\n    // Z-test for conversion rate comparison\n    const p1 = variant.conversions / variant.participants;\n    const p2 = control.conversions / control.participants;\n    const pooledP = (variant.conversions + control.conversions) / (variant.participants + control.participants);\n    \n    const se = Math.sqrt(pooledP * (1 - pooledP) * (1/variant.participants + 1/control.participants));\n    const z = Math.abs(p1 - p2) / se;\n    \n    // Convert z-score to confidence level\n    return this.zScoreToConfidence(z);\n  }\n}\n```\n\n**TDD IMPLEMENTATION APPROACH:**\n\n**RED Phase - Write Failing Tests:**\n```typescript\n// tests/analytics/dashboard.test.ts\ndescribe('Analytics Dashboard', () => {\n  test('should display KPI compliance status with business requirements', async () => {\n    const mockMetrics: KPIMetrics = {\n      completionRate: 75, // Above 70% target\n      executiveBriefingConversion: 12, // Below 15% target  \n      pageLoadTime: 1800, // Below 2s target\n      errorRate: 1.5, // Below 2% target\n      dailyCompletions: 50,\n      avgAssessmentTime: 540000, // 9 minutes\n      mobileCompletionRate: 68 // Above 65% target\n    };\n    \n    render(<Dashboard />);\n    \n    expect(screen.getByText('Completion Rate')).toBeInTheDocument();\n    expect(screen.getByText('75%')).toBeInTheDocument();\n    expect(screen.getByText('Executive Briefing Conversion')).toBeInTheDocument();\n    expect(screen.getByText('12%')).toBeInTheDocument();\n    \n    // Should show warning for executive briefing conversion below target\n    expect(screen.getByTestId('executive-briefing-status')).toHaveClass('status-warning');\n  });\n\n  test('should update metrics in real-time every 30 seconds', async () => {\n    jest.useFakeTimers();\n    const fetchSpy = jest.spyOn(global, 'fetch').mockResolvedValue(new Response('{}'));\n    \n    render(<Dashboard />);\n    \n    // Initial fetch\n    expect(fetchSpy).toHaveBeenCalledTimes(3);\n    \n    // Advance timer by 30 seconds\n    act(() => {\n      jest.advanceTimersByTime(30000);\n    });\n    \n    // Should fetch again\n    expect(fetchSpy).toHaveBeenCalledTimes(6);\n    \n    jest.useRealTimers();\n  });\n});\n\n// tests/analytics/kpi-compliance.test.ts\ndescribe('KPI Compliance Tracking', () => {\n  test('should track completion rate against 70% business requirement', async () => {\n    const analyzer = new FunnelAnalyzer();\n    const mockFunnelData = {\n      landingPageViews: 1000,\n      assessmentStarted: 600, // 60% start rate\n      assessmentCompleted: 450 // 75% of starters complete (meets >70% requirement)\n    };\n    \n    jest.spyOn(analyzer, 'getFunnelData').mockResolvedValue(mockFunnelData);\n    \n    const kpiStatus = await analyzer.getKPICompliance({ start: new Date(), end: new Date() });\n    const completionKPI = kpiStatus.find(kpi => kpi.metric === 'Assessment Completion Rate');\n    \n    expect(completionKPI?.current).toBe(75);\n    expect(completionKPI?.target).toBe(70);\n    expect(completionKPI?.status).toBe('good');\n  });\n\n  test('should track executive briefing conversion against 15% business requirement', async () => {\n    const analyzer = new FunnelAnalyzer();\n    const mockData = {\n      emailCaptured: 300,\n      briefingRequested: 42 // 14% conversion (below 15% requirement)\n    };\n    \n    jest.spyOn(analyzer, 'getFunnelData').mockResolvedValue(mockData);\n    \n    const kpiStatus = await analyzer.getKPICompliance({ start: new Date(), end: new Date() });\n    const briefingKPI = kpiStatus.find(kpi => kpi.metric === 'Executive Briefing Conversion');\n    \n    expect(briefingKPI?.current).toBe(14);\n    expect(briefingKPI?.target).toBe(15);\n    expect(briefingKPI?.status).toBe('critical');\n  });\n});\n```\n\n**GREEN Phase - Minimal Implementation:**\n- Basic real-time metrics collection\n- Simple funnel dashboard\n- A/B test result display\n- KPI compliance indicators\n\n**REFACTOR Phase - Production Ready:**\n- Advanced real-time updates with WebSocket\n- Interactive funnel visualization with drill-down\n- Sophisticated A/B test analysis with confidence intervals\n- Comprehensive error tracking and alerting\n\n**KEY FILES TO CREATE:**\n- /lib/analytics/tracking.ts - Core analytics service with KPI tracking\n- /lib/analytics/performance.ts - Performance monitoring with business targets\n- /lib/analytics/funnel.ts - Conversion funnel analysis with KPI compliance\n- /lib/analytics/ab-testing.ts - A/B test results tracking\n- /app/api/analytics/metrics/route.ts - KPI metrics API\n- /app/api/analytics/dashboard/route.ts - Real-time dashboard data API\n- /components/analytics/Dashboard.tsx - Real-time analytics dashboard\n- /components/analytics/KPICard.tsx - KPI compliance indicators\n- /components/analytics/FunnelChart.tsx - Conversion funnel visualization\n- /components/analytics/ABTestResults.tsx - A/B test results display\n- /hooks/useAnalytics.ts - React analytics hook with error tracking\n- /tests/analytics/ - Comprehensive analytics test files with KPI validation",
        "testStrategy": "TDD implementation with business KPI validation: 1) RED phase tests for KPI compliance tracking (>70% completion, >15% executive briefing conversion, <2s page load), 2) Real-time metrics collection and error tracking tests, 3) Conversion funnel analysis with business requirement validation, 4) A/B test statistical significance testing, 5) GREEN phase minimal dashboard implementation, 6) REFACTOR phase advanced real-time features with comprehensive error handling and alerting",
        "subtasks": [
          {
            "id": 1,
            "title": "Core Analytics Service Implementation",
            "description": "Build the foundational AnalyticsService class with privacy-compliant event tracking, batching, and real-time error tracking capabilities",
            "status": "pending",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "KPI Compliance Tracking System",
            "description": "Implement KPI tracking system that monitors business requirements: >70% completion rate, >15% executive briefing conversion, <2s page load times, and >65% mobile completion rate",
            "status": "pending",
            "dependencies": [1],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Conversion Funnel Analysis Engine",
            "description": "Build comprehensive funnel analysis system that tracks user progression through assessment steps with dropoff identification and KPI validation against business targets",
            "status": "pending",
            "dependencies": [1],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Real-Time Analytics Dashboard",
            "description": "Create interactive dashboard component with live KPI monitoring, funnel visualization, and real-time metrics updates every 30 seconds",
            "status": "pending",
            "dependencies": [2, 3],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "A/B Testing Results Tracking",
            "description": "Implement A/B test tracking system with statistical significance calculations, confidence intervals, and conversion rate comparisons for optimization insights",
            "status": "pending",
            "dependencies": [1],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "Performance Monitoring & Error Tracking",
            "description": "Build comprehensive performance monitoring system that tracks Core Web Vitals, API response times, assessment step duration, and real-time error tracking with alerting",
            "status": "pending",
            "dependencies": [1],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "Analytics API Endpoints",
            "description": "Create REST API endpoints for analytics data retrieval including /api/analytics/metrics, /api/analytics/funnel, /api/analytics/events, and /api/analytics/ab-tests",
            "status": "pending",
            "dependencies": [2, 3, 5, 6],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 8,
            "title": "Comprehensive Analytics Testing Suite",
            "description": "Implement TDD test suite covering KPI validation, funnel analysis accuracy, A/B test statistical calculations, and real-time dashboard functionality",
            "status": "pending",
            "dependencies": [1, 2, 3, 4, 5, 6, 7],
            "details": "",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 12,
        "title": "Mobile-First Design & Cross-Platform Optimization",
        "description": "Implement comprehensive mobile-first responsive design system and cross-browser compatibility for the complete assessment platform. Optimize specifically for 40%+ executive mobile users with performance-focused mobile experience, accessibility compliance, and TDD-driven component testing across devices. Reference implementation-spec/user-experience-flow.md for mobile-specific patterns.",
        "status": "pending",
        "dependencies": [],
        "priority": "high",
        "details": "**MOBILE-FIRST DESIGN & CROSS-PLATFORM IMPLEMENTATION:**\n\n**Mobile-First Requirements (40%+ Executive Mobile Users):**\n- Reference /workspaces/ai-scorecard/implementation-spec/user-experience-flow.md for mobile-specific patterns, touch optimization, and responsive breakpoints\n- Mobile-first approach optimized for executive users (40%+ mobile traffic)\n- Breakpoint system: mobile (320px-768px), tablet (768px-1024px), desktop (1024px+)\n- Touch-optimized interface with minimum 44px touch targets\n- Executive-appropriate typography scaling and spacing\n- Adaptive content strategy based on screen real estate\n\n**Responsive Breakpoint System:**\n```typescript\n// styles/breakpoints.ts\nexport const breakpoints = {\n  mobile: '320px',\n  mobileLg: '480px',\n  tablet: '768px',\n  desktop: '1024px',\n  desktopLg: '1280px',\n  desktopXl: '1440px'\n} as const;\n\nexport const mediaQueries = {\n  mobile: `@media (min-width: ${breakpoints.mobile})`,\n  mobileLg: `@media (min-width: ${breakpoints.mobileLg})`,\n  tablet: `@media (min-width: ${breakpoints.tablet})`,\n  desktop: `@media (min-width: ${breakpoints.desktop})`,\n  desktopLg: `@media (min-width: ${breakpoints.desktopLg})`,\n  desktopXl: `@media (min-width: ${breakpoints.desktopXl})`,\n  \n  // Max-width queries for mobile-specific styles\n  mobileOnly: `@media (max-width: ${breakpoints.tablet})`,\n  tabletOnly: `@media (min-width: ${breakpoints.tablet}) and (max-width: ${breakpoints.desktop})`,\n  \n  // Executive mobile optimization\n  executiveMobile: `@media (max-width: ${breakpoints.tablet}) and (orientation: portrait)`,\n  \n  // High-density displays\n  retina: '@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)',\n  \n  // Accessibility preferences\n  reducedMotion: '@media (prefers-reduced-motion: reduce)',\n  highContrast: '@media (prefers-contrast: high)',\n  darkMode: '@media (prefers-color-scheme: dark)'\n} as const;\n```\n\n**Mobile-Optimized Assessment Components:**\n```typescript\n// components/assessment/ResponsiveStepContainer.tsx\ninterface ResponsiveStepContainerProps {\n  stepNumber: number;\n  stepConfig: AssessmentStepConfig;\n}\n\nexport function ResponsiveStepContainer({ stepNumber, stepConfig }: ResponsiveStepContainerProps) {\n  const [isMobile, setIsMobile] = useState(false);\n  const [orientation, setOrientation] = useState<'portrait' | 'landscape'>('portrait');\n  const [viewportHeight, setViewportHeight] = useState(0);\n\n  useLayoutEffect(() => {\n    const updateLayout = () => {\n      const mobile = window.innerWidth < 768;\n      const landscape = window.innerWidth > window.innerHeight;\n      \n      setIsMobile(mobile);\n      setOrientation(landscape ? 'landscape' : 'portrait');\n      setViewportHeight(window.innerHeight);\n    };\n\n    updateLayout();\n    window.addEventListener('resize', updateLayout);\n    window.addEventListener('orientationchange', updateLayout);\n    \n    return () => {\n      window.removeEventListener('resize', updateLayout);\n      window.removeEventListener('orientationchange', updateLayout);\n    };\n  }, []);\n\n  return (\n    <div className={cn(\n      \"responsive-step-container\",\n      isMobile && \"mobile-layout\",\n      isMobile && orientation === 'landscape' && \"landscape-layout\"\n    )}>\n      {/* Mobile: Compact header */}\n      {isMobile ? (\n        <MobileStepHeader \n          stepNumber={stepNumber}\n          title={stepConfig.title}\n          progress={(stepNumber / 4) * 100}\n        />\n      ) : (\n        <DesktopStepHeader \n          stepNumber={stepNumber}\n          title={stepConfig.title}\n          description={stepConfig.description}\n          progress={(stepNumber / 4) * 100}\n        />\n      )}\n\n      {/* Responsive question layout */}\n      <div className={cn(\n        \"questions-container\",\n        isMobile && \"mobile-questions\",\n        isMobile && viewportHeight < 600 && \"compact-mobile\"\n      )}>\n        {stepConfig.questions.map((question, index) => (\n          <ResponsiveQuestion\n            key={question.id}\n            question={question}\n            isMobile={isMobile}\n            isCompact={isMobile && viewportHeight < 600}\n            autoFocus={index === 0}\n          />\n        ))}\n      </div>\n\n      {/* Mobile: Fixed bottom navigation */}\n      {isMobile ? (\n        <MobileBottomNavigation \n          stepNumber={stepNumber}\n          canProceed={canProceedToNext}\n          onNext={handleNext}\n          onPrevious={handlePrevious}\n        />\n      ) : (\n        <DesktopNavigation \n          stepNumber={stepNumber}\n          canProceed={canProceedToNext}\n          onNext={handleNext}\n          onPrevious={handlePrevious}\n        />\n      )}\n    </div>\n  );\n}\n\n// components/assessment/ResponsiveQuestion.tsx\ninterface ResponsiveQuestionProps {\n  question: AssessmentQuestion;\n  isMobile: boolean;\n  isCompact: boolean;\n  autoFocus?: boolean;\n}\n\nexport function ResponsiveQuestion({ question, isMobile, isCompact, autoFocus }: ResponsiveQuestionProps) {\n  const [selectedOption, setSelectedOption] = useState<string | undefined>();\n  \n  return (\n    <div className={cn(\n      \"responsive-question\",\n      isMobile && \"mobile-question\",\n      isCompact && \"compact-question\"\n    )}>\n      {/* Question header */}\n      <div className=\"question-header\">\n        <h3 className={cn(\n          \"question-title\",\n          isMobile ? \"text-lg\" : \"text-xl\",\n          isCompact && \"text-base\"\n        )}>\n          {question.title}\n        </h3>\n        <p className={cn(\n          \"question-text\",\n          isMobile ? \"text-sm\" : \"text-base\",\n          isCompact && \"text-xs\"\n        )}>\n          {question.question}\n        </p>\n      </div>\n\n      {/* Mobile: Stack options vertically with touch optimization */}\n      <div className={cn(\n        \"options-container\",\n        isMobile ? \"mobile-options space-y-2\" : \"desktop-options space-y-3\"\n      )}>\n        {Object.entries(question.options).map(([key, option]) => (\n          <TouchOptimizedOption\n            key={key}\n            optionKey={key}\n            option={option}\n            isSelected={selectedOption === key}\n            onSelect={() => setSelectedOption(key)}\n            isMobile={isMobile}\n            isCompact={isCompact}\n            autoFocus={autoFocus && key === 'A'}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\n// components/assessment/TouchOptimizedOption.tsx\ninterface TouchOptimizedOptionProps {\n  optionKey: string;\n  option: { text: string; points: number };\n  isSelected: boolean;\n  onSelect: () => void;\n  isMobile: boolean;\n  isCompact: boolean;\n  autoFocus?: boolean;\n}\n\nexport function TouchOptimizedOption({ \n  optionKey, \n  option, \n  isSelected, \n  onSelect, \n  isMobile, \n  isCompact,\n  autoFocus \n}: TouchOptimizedOptionProps) {\n  return (\n    <button\n      className={cn(\n        \"touch-option w-full text-left rounded-lg border-2 transition-all duration-200\",\n        // Touch-optimized sizing\n        isMobile ? \"min-h-[44px] p-3\" : \"p-4\",\n        isCompact && \"min-h-[40px] p-2\",\n        // Visual states\n        isSelected \n          ? \"border-blue-500 bg-blue-50 text-blue-900 shadow-sm\" \n          : \"border-gray-200 bg-white hover:border-gray-300 hover:bg-gray-50\",\n        // Touch feedback\n        isMobile && \"active:scale-98 active:bg-blue-100\"\n      )}\n      onClick={onSelect}\n      autoFocus={autoFocus}\n      // Accessibility\n      aria-pressed={isSelected}\n      role=\"radio\"\n    >\n      <div className=\"flex items-start gap-2\">\n        <span className={cn(\n          \"option-key font-bold text-blue-600 flex-shrink-0\",\n          isMobile ? \"text-base\" : \"text-lg\",\n          isCompact && \"text-sm\"\n        )}>\n          {optionKey})\n        </span>\n        <span className={cn(\n          \"option-text text-gray-800 leading-relaxed\",\n          isMobile ? \"text-sm\" : \"text-base\",\n          isCompact && \"text-xs leading-tight\"\n        )}>\n          {option.text}\n        </span>\n      </div>\n    </button>\n  );\n}\n```\n\n**Mobile Bottom Navigation:**\n```typescript\n// components/assessment/MobileBottomNavigation.tsx\ninterface MobileBottomNavigationProps {\n  stepNumber: number;\n  canProceed: boolean;\n  onNext: () => void;\n  onPrevious: () => void;\n}\n\nexport function MobileBottomNavigation({ \n  stepNumber, \n  canProceed, \n  onNext, \n  onPrevious \n}: MobileBottomNavigationProps) {\n  const [isVisible, setIsVisible] = useState(true);\n  const [lastScrollY, setLastScrollY] = useState(0);\n\n  // Hide navigation on scroll down, show on scroll up\n  useEffect(() => {\n    const handleScroll = () => {\n      const currentScrollY = window.scrollY;\n      const isScrollingDown = currentScrollY > lastScrollY;\n      \n      setIsVisible(!isScrollingDown || currentScrollY < 100);\n      setLastScrollY(currentScrollY);\n    };\n\n    window.addEventListener('scroll', handleScroll, { passive: true });\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, [lastScrollY]);\n\n  return (\n    <div className={cn(\n      \"mobile-bottom-nav fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 p-4 transition-transform duration-300 z-50\",\n      \"safe-area-bottom\", // iOS safe area\n      !isVisible && \"translate-y-full\"\n    )}>\n      <div className=\"flex items-center justify-between gap-4\">\n        {/* Previous button */}\n        <button\n          onClick={onPrevious}\n          disabled={stepNumber === 1}\n          className={cn(\n            \"flex-1 px-4 py-3 rounded-lg font-medium transition-colors\",\n            stepNumber === 1 \n              ? \"bg-gray-100 text-gray-400 cursor-not-allowed\"\n              : \"bg-gray-200 text-gray-700 hover:bg-gray-300 active:bg-gray-400\"\n          )}\n        >\n          ← Previous\n        </button>\n\n        {/* Progress indicator */}\n        <div className=\"flex gap-1\">\n          {[1, 2, 3, 4].map((step) => (\n            <div\n              key={step}\n              className={cn(\n                \"w-2 h-2 rounded-full transition-colors\",\n                step <= stepNumber ? \"bg-blue-600\" : \"bg-gray-300\"\n              )}\n            />\n          ))}\n        </div>\n\n        {/* Next button */}\n        <button\n          onClick={onNext}\n          disabled={!canProceed}\n          className={cn(\n            \"flex-1 px-4 py-3 rounded-lg font-medium transition-colors\",\n            canProceed\n              ? \"bg-blue-600 text-white hover:bg-blue-700 active:bg-blue-800\"\n              : \"bg-gray-100 text-gray-400 cursor-not-allowed\"\n          )}\n        >\n          {stepNumber === 4 ? 'Complete' : 'Next'} →\n        </button>\n      </div>\n    </div>\n  );\n}\n```\n\n**Cross-Browser Compatibility Testing:**\n```typescript\n// lib/browser-support/compatibility.ts\nexport interface BrowserSupport {\n  name: string;\n  version: string;\n  supported: boolean;\n  features: FeatureSupport;\n}\n\nexport interface FeatureSupport {\n  css: {\n    grid: boolean;\n    flexbox: boolean;\n    customProperties: boolean;\n    animations: boolean;\n  };\n  js: {\n    es6: boolean;\n    fetch: boolean;\n    localStorage: boolean;\n    intersection: boolean;\n  };\n}\n\nexport class BrowserCompatibility {\n  private userAgent: string;\n  \n  constructor() {\n    this.userAgent = navigator.userAgent;\n  }\n\n  detectBrowser(): BrowserInfo {\n    const browsers = [\n      { name: 'Chrome', pattern: /Chrome\\/(\\d+)/ },\n      { name: 'Firefox', pattern: /Firefox\\/(\\d+)/ },\n      { name: 'Safari', pattern: /Safari\\/(\\d+)/ },\n      { name: 'Edge', pattern: /Edg\\/(\\d+)/ },\n      { name: 'Internet Explorer', pattern: /MSIE (\\d+)|Trident.*rv:(\\d+)/ }\n    ];\n\n    for (const browser of browsers) {\n      const match = this.userAgent.match(browser.pattern);\n      if (match) {\n        return {\n          name: browser.name,\n          version: match[1] || match[2],\n          userAgent: this.userAgent\n        };\n      }\n    }\n\n    return { name: 'Unknown', version: '0', userAgent: this.userAgent };\n  }\n\n  checkFeatureSupport(): FeatureSupport {\n    return {\n      css: {\n        grid: CSS.supports('display', 'grid'),\n        flexbox: CSS.supports('display', 'flex'),\n        customProperties: CSS.supports('--custom', 'property'),\n        animations: CSS.supports('animation', 'none')\n      },\n      js: {\n        es6: typeof Symbol !== 'undefined',\n        fetch: typeof fetch !== 'undefined',\n        localStorage: typeof localStorage !== 'undefined',\n        intersection: typeof IntersectionObserver !== 'undefined'\n      }\n    };\n  }\n\n  getSupportLevel(): 'full' | 'partial' | 'minimal' | 'unsupported' {\n    const browser = this.detectBrowser();\n    const features = this.checkFeatureSupport();\n    \n    // Minimum requirements for executive users\n    const criticalFeatures = [\n      features.css.flexbox,\n      features.js.fetch,\n      features.js.localStorage\n    ];\n\n    const supportedCritical = criticalFeatures.filter(Boolean).length;\n    \n    if (supportedCritical === criticalFeatures.length) {\n      return features.css.grid && features.js.intersection ? 'full' : 'partial';\n    } else if (supportedCritical >= 2) {\n      return 'minimal';\n    } else {\n      return 'unsupported';\n    }\n  }\n\n  loadPolyfills(): Promise<void> {\n    const promises: Promise<any>[] = [];\n    const features = this.checkFeatureSupport();\n\n    if (!features.js.fetch) {\n      promises.push(import('whatwg-fetch'));\n    }\n\n    if (!features.js.intersection) {\n      promises.push(import('intersection-observer'));\n    }\n\n    if (!features.css.customProperties) {\n      promises.push(import('css-vars-ponyfill').then(ponyfill => ponyfill.default()));\n    }\n\n    return Promise.all(promises).then(() => {});\n  }\n}\n```\n\n**TDD IMPLEMENTATION APPROACH:**\n\n**RED Phase - Write Failing Tests:**\n```typescript\n// tests/responsive/ResponsiveStepContainer.test.tsx\ndescribe('Responsive Step Container', () => {\n  test('should render mobile layout when viewport width < 768px', () => {\n    // Mock window.innerWidth\n    Object.defineProperty(window, 'innerWidth', {\n      writable: true,\n      configurable: true,\n      value: 500\n    });\n\n    render(<ResponsiveStepContainer stepNumber={1} stepConfig={mockStepConfig} />);\n\n    expect(screen.getByTestId('mobile-step-header')).toBeInTheDocument();\n    expect(screen.getByTestId('mobile-bottom-nav')).toBeInTheDocument();\n  });\n\n  test('should render desktop layout when viewport width >= 768px', () => {\n    Object.defineProperty(window, 'innerWidth', {\n      writable: true,\n      configurable: true,\n      value: 1024\n    });\n\n    render(<ResponsiveStepContainer stepNumber={1} stepConfig={mockStepConfig} />);\n\n    expect(screen.getByTestId('desktop-step-header')).toBeInTheDocument();\n    expect(screen.getByTestId('desktop-navigation')).toBeInTheDocument();\n  });\n\n  test('should apply compact layout when mobile viewport height < 600px', () => {\n    Object.defineProperty(window, 'innerWidth', { value: 400 });\n    Object.defineProperty(window, 'innerHeight', { value: 500 });\n\n    render(<ResponsiveStepContainer stepNumber={1} stepConfig={mockStepConfig} />);\n\n    expect(screen.getByTestId('questions-container')).toHaveClass('compact-mobile');\n  });\n});\n\n// tests/responsive/TouchOptimizedOption.test.tsx\ndescribe('Touch Optimized Option', () => {\n  test('should have minimum 44px height on mobile', () => {\n    render(\n      <TouchOptimizedOption\n        optionKey=\"A\"\n        option={{ text: 'Test option', points: 25 }}\n        isSelected={false}\n        onSelect={jest.fn()}\n        isMobile={true}\n        isCompact={false}\n      />\n    );\n\n    const button = screen.getByRole('radio');\n    expect(button).toHaveClass('min-h-[44px]');\n  });\n\n  test('should apply touch feedback styles on mobile', async () => {\n    const mockOnSelect = jest.fn();\n    \n    render(\n      <TouchOptimizedOption\n        optionKey=\"A\"\n        option={{ text: 'Test option', points: 25 }}\n        isSelected={false}\n        onSelect={mockOnSelect}\n        isMobile={true}\n        isCompact={false}\n      />\n    );\n\n    const button = screen.getByRole('radio');\n    expect(button).toHaveClass('active:scale-98');\n\n    await user.click(button);\n    expect(mockOnSelect).toHaveBeenCalled();\n  });\n\n  test('should reduce text size in compact mode', () => {\n    render(\n      <TouchOptimizedOption\n        optionKey=\"A\"\n        option={{ text: 'Test option', points: 25 }}\n        isSelected={false}\n        onSelect={jest.fn()}\n        isMobile={true}\n        isCompact={true}\n      />\n    );\n\n    const optionText = screen.getByText('Test option');\n    expect(optionText).toHaveClass('text-xs');\n  });\n});\n\n// tests/browser-support/compatibility.test.ts\ndescribe('Browser Compatibility', () => {\n  test('should detect Chrome browser correctly', () => {\n    const compatibility = new BrowserCompatibility();\n    \n    // Mock Chrome user agent\n    Object.defineProperty(navigator, 'userAgent', {\n      writable: true,\n      value: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'\n    });\n\n    const browser = compatibility.detectBrowser();\n    \n    expect(browser.name).toBe('Chrome');\n    expect(browser.version).toBe('91');\n  });\n\n  test('should return full support for modern browsers', () => {\n    const compatibility = new BrowserCompatibility();\n    \n    // Mock all features as supported\n    Object.defineProperty(CSS, 'supports', {\n      value: () => true\n    });\n    \n    const supportLevel = compatibility.getSupportLevel();\n    \n    expect(supportLevel).toBe('full');\n  });\n\n  test('should load polyfills for missing features', async () => {\n    const compatibility = new BrowserCompatibility();\n    \n    // Mock missing fetch\n    delete (global as any).fetch;\n    \n    const loadPromise = compatibility.loadPolyfills();\n    \n    expect(loadPromise).resolves.toBeUndefined();\n  });\n});\n```\n\n**GREEN Phase - Minimal Implementation:**\n- Basic responsive breakpoints without advanced logic\n- Simple mobile/desktop layout switching\n- Basic touch optimization\n- Minimal browser compatibility checks\n\n**REFACTOR Phase - Production Ready:**\n- Advanced responsive design with orientation handling\n- Sophisticated touch gestures and interactions\n- Comprehensive browser compatibility and polyfills\n- Performance optimization for mobile devices\n\n**KEY FILES TO CREATE:**\n- /styles/breakpoints.ts - Responsive breakpoint system\n- /components/assessment/ResponsiveStepContainer.tsx - Responsive step layout\n- /components/assessment/TouchOptimizedOption.tsx - Touch-optimized components\n- /components/assessment/MobileBottomNavigation.tsx - Mobile navigation\n- /lib/browser-support/compatibility.ts - Browser compatibility utilities\n- /hooks/useResponsive.ts - Responsive design hooks\n- /styles/responsive.css - Responsive design utilities\n- /tests/responsive/ - Responsive design tests\n- /tests/browser-support/ - Browser compatibility tests",
        "testStrategy": "",
        "subtasks": []
      },
      {
        "id": 13,
        "title": "Landing Page Implementation & Conversion Optimization",
        "description": "Build complete landing page with hero section, social proof, trust indicators, sample questions preview, and A/B testing capability for conversion optimization.",
        "details": "**LANDING PAGE IMPLEMENTATION:**\n\n**Hero Section Components:**\n- Value proposition messaging with executive-focused copy targeting 40%+ mobile users\n- Clear headline and subheadline optimization with A/B testing variants\n- Primary CTA button with conversion-optimized placement and design\n- Hero image/video background with performance optimization\n- Trust badges and security indicators prominently displayed\n\n**Social Proof & Trust Elements:**\n- Customer testimonials with executive quotes and company logos\n- Usage statistics and completion metrics display\n- Industry recognition badges and certifications\n- Privacy and security compliance indicators (SOC2, GDPR)\n- Executive briefing success stories and case studies\n\n**Sample Questions Preview:**\n- Interactive preview of 3-5 sample assessment questions\n- Category breakdown visualization showing AI Strategy, Technology, Risk Management, and Governance\n- Progress indicator and estimated completion time display\n- Mobile-optimized question format with touch-friendly interactions\n\n**A/B Testing Framework:**\n- Multiple CTA variants for headline, button text, and placement testing\n- Value proposition messaging variants for different audience segments\n- Landing page layout variants for conversion optimization\n- Analytics integration for conversion tracking and statistical significance\n\n**Mobile-First Implementation:**\n- Reference /workspaces/ai-scorecard/implementation-spec/user-experience-flow.md for mobile breakpoints\n- Touch-optimized interactions with 44px minimum touch targets\n- Performance optimization for mobile loading speeds\n- Progressive enhancement for cross-device compatibility\n\n**Conversion Elements:**\n- Multiple entry points to assessment with clear value messaging\n- Executive briefing qualification messaging and benefits\n- Social sharing capabilities for viral growth\n- Email capture for nurture sequences integration",
        "testStrategy": "**LANDING PAGE TDD TESTING:**\n\n**RED Phase - Conversion Optimization Tests:**\n- Test A/B testing framework with multiple CTA variants and statistical significance tracking\n- Validate hero section component rendering with mobile-first responsive breakpoints\n- Test social proof element display and trust indicator positioning\n- Verify sample questions preview functionality with category breakdown\n- Test conversion tracking integration with analytics system\n\n**Component Testing:**\n- Unit tests for hero section variants and CTA button optimization (90%+ coverage)\n- Integration tests for social proof data fetching and testimonial display\n- Mobile responsiveness tests across device breakpoints per user-experience-flow.md\n- Performance tests for page load speed optimization (<2s load time)\n\n**Conversion Flow Testing:**\n- End-to-end tests for landing page to assessment transition flow\n- A/B testing variant rotation and analytics event tracking validation\n- Email capture integration testing with automation system\n- Cross-browser compatibility testing for conversion optimization\n\n**Business KPI Validation:**\n- Landing page conversion rate testing (target >15% to assessment start)\n- Mobile conversion optimization validation for 40%+ executive mobile users\n- Value proposition messaging effectiveness testing with user behavior analytics",
        "status": "pending",
        "dependencies": [11, 12],
        "priority": "medium",
        "subtasks": []
      },
      {
        "id": 14,
        "title": "Session Management & Assessment Recovery System",
        "description": "Implement comprehensive session management with 24-hour persistence, resume capability, and incomplete assessment handling with auto-save functionality and recovery flows.",
        "details": "**SESSION MANAGEMENT IMPLEMENTATION:**\n\n**Session Storage & Persistence:**\n- Reference /workspaces/ai-scorecard/implementation-spec/api-specification.md for session endpoints (POST /api/sessions, GET /api/sessions/:id, PUT /api/sessions/:id)\n- Reference /workspaces/ai-scorecard/implementation-spec/database-design.md for session storage requirements and auto-save patterns\n- 24-hour session persistence with automatic cleanup after expiration\n- Browser storage integration (localStorage/sessionStorage) with server-side synchronization\n- Session token generation and validation with secure UUID implementation\n- Auto-save functionality every 30 seconds during assessment progress\n- Cross-tab session synchronization to prevent data loss\n\n**Recovery & Resume System:**\n- Incomplete assessment detection and recovery flow on page load\n- Resume capability from any point in the assessment with progress restoration\n- Session state restoration including current question, responses, and progress indicators\n- Graceful handling of expired sessions with user notification and restart options\n- Data integrity validation during recovery to ensure response consistency\n\n**Session API Implementation:**\n```typescript\n// Session management endpoints\nPOST /api/sessions - Create new session\nGET /api/sessions/:sessionId - Retrieve session data\nPUT /api/sessions/:sessionId - Update session progress\nDELETE /api/sessions/:sessionId - Cleanup expired session\n\n// Session data structure\ninterface SessionData {\n  sessionId: string;\n  userId?: string;\n  responses: Record<string, string>;\n  currentStep: number;\n  progress: number;\n  lastActivity: Date;\n  expiresAt: Date;\n  isComplete: boolean;\n}\n```\n\n**Auto-Save Integration:**\n- Real-time response saving with debounced API calls\n- Progress tracking with step-by-step persistence\n- Network error handling with offline queue support\n- Conflict resolution for concurrent session updates\n- Recovery notification system with user-friendly messaging",
        "testStrategy": "**SESSION MANAGEMENT TDD TESTING:**\n\n**RED Phase - Core Session Tests:**\n- Test session creation with unique ID generation and database persistence\n- Validate 24-hour expiration logic with automatic cleanup functionality\n- Test auto-save mechanism with 30-second intervals and debounced API calls\n- Verify session recovery flow from incomplete assessments with data integrity validation\n- Test cross-tab synchronization and conflict resolution scenarios\n\n**GREEN Phase - Recovery System Tests:**\n- Integration tests for session API endpoints with database operations\n- Browser storage synchronization tests with server-side validation\n- Network failure simulation with offline queue and recovery testing\n- Session expiration handling with user notification flows\n- Progressive recovery testing with various completion states\n\n**REFACTOR Phase - Performance & Edge Cases:**\n- Session cleanup job testing with bulk expiration handling\n- Concurrent session update testing with race condition prevention\n- Memory leak prevention in auto-save intervals and cleanup\n- Cross-browser compatibility testing for storage mechanisms\n- Load testing for high-volume session management scenarios",
        "status": "pending",
        "dependencies": [3],
        "priority": "medium",
        "subtasks": []
      },
      {
        "id": 15,
        "title": "A/B Testing Framework & Experimentation Platform",
        "description": "Implement comprehensive A/B testing infrastructure for CTA variants, subject line testing, and statistical significance calculation to achieve >70% completion rate and >15% executive briefing conversion goals.",
        "details": "**A/B TESTING FRAMEWORK IMPLEMENTATION:**\n\n**Core A/B Testing Infrastructure:**\n- Statistical significance calculation engine with confidence intervals and p-value analysis\n- Variant management system for CTA buttons, subject lines, and landing page elements\n- Traffic splitting algorithm with weighted distribution and session persistence\n- Conversion tracking integration with analytics pipeline from Task 11\n- Real-time experiment monitoring dashboard with statistical power analysis\n- Experiment lifecycle management (setup, running, analysis, conclusion)\n\n**CTA Variant Testing System:**\n```typescript\ninterface ABTestVariant {\n  id: string;\n  name: string;\n  content: string;\n  weight: number; // 0-100 traffic allocation\n  conversions: number;\n  impressions: number;\n}\n\ninterface ABExperiment {\n  id: string;\n  name: string;\n  status: 'draft' | 'running' | 'paused' | 'completed';\n  variants: ABTestVariant[];\n  targetMetric: 'completion_rate' | 'executive_briefing_conversion';\n  minimumSampleSize: number;\n  confidenceLevel: number; // 95% default\n}\n```\n\n**Subject Line Testing Framework:**\n- Email subject line variant management integrated with Task 10 email system\n- Open rate and click-through rate tracking\n- Automated winner selection based on statistical significance\n- Subject line template system with personalization variables\n\n**Statistical Analysis Engine:**\n- Chi-square test implementation for conversion rate analysis\n- Bayesian A/B testing with credible intervals\n- Sample size calculator based on desired effect size and power\n- Multiple testing correction (Bonferroni) for multiple variants\n- Automated experiment stopping rules when significance is reached\n\n**Business KPI Integration:**\n- >70% completion rate optimization tracking\n- >15% executive briefing conversion monitoring\n- Real-time KPI dashboard with experiment impact analysis\n- Automated alerts for underperforming experiments\n\n**Experiment Configuration API:**\n```typescript\n// POST /api/experiments\n// GET /api/experiments/:id/results\n// PUT /api/experiments/:id/status\n// POST /api/experiments/:id/variants\n```\n\n**Database Schema Extensions:**\n```sql\nCREATE TABLE ab_experiments (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  name VARCHAR(255) NOT NULL,\n  description TEXT,\n  status experiment_status NOT NULL DEFAULT 'draft',\n  target_metric VARCHAR(100) NOT NULL,\n  confidence_level DECIMAL(3,2) DEFAULT 0.95,\n  minimum_sample_size INTEGER,\n  start_date TIMESTAMP,\n  end_date TIMESTAMP,\n  created_at TIMESTAMP DEFAULT NOW()\n);\n\nCREATE TABLE ab_variants (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  experiment_id UUID REFERENCES ab_experiments(id),\n  name VARCHAR(255) NOT NULL,\n  content JSONB NOT NULL,\n  traffic_weight INTEGER DEFAULT 50,\n  impressions INTEGER DEFAULT 0,\n  conversions INTEGER DEFAULT 0\n);\n\nCREATE TABLE ab_events (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  experiment_id UUID REFERENCES ab_experiments(id),\n  variant_id UUID REFERENCES ab_variants(id),\n  session_id VARCHAR(255),\n  event_type VARCHAR(50), -- 'impression', 'conversion'\n  timestamp TIMESTAMP DEFAULT NOW()\n);\n```",
        "testStrategy": "**A/B TESTING TDD IMPLEMENTATION:**\n\n**RED Phase - Core A/B Testing Tests:**\n- Test statistical significance calculation with known datasets and expected p-values\n- Validate traffic splitting algorithm ensures proper variant distribution\n- Test conversion tracking integration with analytics system from Task 11\n- Verify experiment lifecycle state management (draft→running→completed)\n- Test automated winner selection based on confidence intervals\n\n**Statistical Analysis Testing:**\n- Unit tests for chi-square test implementation with sample data\n- Test Bayesian A/B testing credible interval calculations\n- Validate sample size calculator with known effect sizes\n- Test multiple testing correction algorithms\n- Verify automated stopping rules trigger at correct significance levels\n\n**Business KPI Validation Tests:**\n- Test >70% completion rate tracking and optimization alerts\n- Validate >15% executive briefing conversion monitoring\n- Test real-time KPI dashboard data accuracy\n- Verify experiment impact analysis calculations\n\n**Integration Testing:**\n- Test CTA variant serving with session persistence across pages\n- Validate email subject line A/B testing integration with Task 10\n- Test experiment configuration API endpoints with proper validation\n- Verify database schema handles concurrent experiment data correctly\n\n**Performance & Reliability Tests:**\n- Load testing for traffic splitting under high concurrent users\n- Test experiment data consistency during database failover\n- Validate statistical calculations performance with large datasets\n- Test real-time dashboard updates with WebSocket connections\n\n**GREEN Phase Implementation:**\n- Implement statistical significance engine with 95% confidence intervals\n- Build variant management system with traffic allocation controls\n- Create conversion tracking pipeline integrated with existing analytics\n- Develop experiment monitoring dashboard with real-time KPI tracking",
        "status": "pending",
        "dependencies": [11, 10, 3],
        "priority": "medium",
        "subtasks": []
      },
      {
        "id": 16,
        "title": "Production Deployment Pipeline & Monitoring Setup",
        "description": "Implement complete production deployment with Vercel, environment configuration, health monitoring, and alerting system with DNS configuration, SSL setup, and comprehensive monitoring specifications.",
        "details": "**PRODUCTION DEPLOYMENT IMPLEMENTATION:**\n\n**Vercel Deployment Configuration:**\n- Reference /workspaces/ai-scorecard/implementation-spec/deployment-guide.md for complete deployment requirements\n- Vercel project setup with optimized build configuration and edge function deployment\n- Environment variable management with production, staging, and preview configurations\n- Custom domain configuration with DNS settings and SSL certificate automation\n- Build optimization with static generation and incremental static regeneration (ISR)\n- Edge function deployment for API routes with regional optimization\n- Database connection pooling and production-ready connection strings\n\n**Environment & Configuration Management:**\n- Production environment variables with secure secret management\n- Database migration strategy for production deployment\n- CDN configuration for static assets and image optimization\n- Rate limiting and API throttling for production traffic\n- CORS configuration for production domains\n- Security headers implementation (CSP, HSTS, X-Frame-Options)\n\n**Health Monitoring & Alerting System:**\n- Application health checks with endpoint monitoring (/api/health)\n- Real-time performance monitoring with Core Web Vitals tracking\n- Error tracking and exception monitoring with Sentry integration\n- Database connection monitoring and query performance tracking\n- Uptime monitoring with 99.9% availability target\n- Automated alerting system for critical failures and performance degradation\n- Log aggregation and structured logging for production debugging\n- Monitoring dashboard with key metrics visualization\n\n**Production Readiness Checklist:**\n- Security audit and penetration testing preparation\n- Load testing with expected traffic patterns\n- Backup and disaster recovery procedures\n- Performance optimization with lighthouse scoring >90\n- Analytics integration validation for production traffic\n- Session management testing under production load",
        "testStrategy": "**PRODUCTION DEPLOYMENT TDD TESTING:**\n\n**RED Phase - Infrastructure Tests:**\n- Test Vercel deployment configuration with build verification and edge function validation\n- Validate environment variable loading across production, staging, and preview environments\n- Test custom domain configuration with DNS resolution and SSL certificate validation\n- Test database connection pooling under production load conditions\n- Validate health check endpoints return proper status codes and response times\n\n**Production Monitoring Tests:**\n- Test real-time performance monitoring captures Core Web Vitals accurately\n- Validate error tracking integration logs exceptions with proper context\n- Test alerting system triggers notifications for critical failures\n- Test uptime monitoring detects service interruptions within acceptable thresholds\n- Validate log aggregation captures structured logs for debugging\n\n**Load Testing & Performance Validation:**\n- Test application performance under expected production traffic loads\n- Validate session management handles concurrent users without degradation\n- Test database queries perform optimally under production data volumes\n- Test CDN serves static assets with proper caching headers\n- Validate analytics integration tracks production events accurately\n\n**Security & Compliance Testing:**\n- Test security headers implementation (CSP, HSTS, X-Frame-Options)\n- Validate CORS configuration allows only authorized domains\n- Test rate limiting prevents abuse and maintains service availability\n- Test SSL certificate auto-renewal and domain security configuration",
        "status": "pending",
        "dependencies": [11, 12, 14, 15],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": 17,
        "title": "Comprehensive Error Handling & System Resilience",
        "description": "Implement complete error handling system with retry logic, user-friendly error messages, and fallback UI patterns for critical vs non-critical errors with background retry systems.",
        "details": "**COMPREHENSIVE ERROR HANDLING IMPLEMENTATION:**\n\n**Reference Implementation Specification:**\n- Primary source: /workspaces/ai-scorecard/implementation-spec/error-handling.md for all error patterns and resilience requirements\n- Critical vs non-critical error classification and handling strategies\n- Background retry systems with exponential backoff algorithms\n- User-friendly error messaging with contextual recovery actions\n\n**Error Classification System:**\n- Critical errors: Database failures, authentication issues, payment processing failures\n- Non-critical errors: Analytics tracking failures, non-essential API calls, optional feature failures\n- Transient errors: Network timeouts, rate limiting, temporary service unavailability\n- Permanent errors: Invalid input, authorization failures, resource not found\n\n**Retry Logic Implementation:**\n- Exponential backoff with jitter for transient failures (1s, 2s, 4s, 8s intervals)\n- Circuit breaker pattern for external service calls with failure threshold monitoring\n- Background retry queue for non-blocking error recovery with persistent storage\n- Maximum retry limits based on error type (3 for critical, 5 for non-critical)\n\n**User Experience Error Handling:**\n- Toast notifications for non-blocking errors with dismissible actions\n- Inline error states for form validation with specific field-level messaging\n- Fallback UI components for failed data loads with retry buttons\n- Loading states with timeout handling and graceful degradation patterns\n- Error boundary components for React component tree error isolation\n\n**Database & API Error Resilience:**\n- Database connection pooling with retry logic and connection health monitoring\n- API timeout configuration with progressive timeout increases\n- HubSpot integration error handling with fallback lead capture mechanisms\n- Session recovery for interrupted assessment flows with auto-save integration\n- Assessment data validation with client-side and server-side error handling\n\n**Monitoring & Alerting Integration:**\n- Error logging with structured logging format and severity classification\n- Error rate monitoring with threshold-based alerting for critical failures\n- Performance impact tracking for error handling overhead\n- User journey impact analysis for error-affected conversion funnels",
        "testStrategy": "**ERROR HANDLING TDD TESTING:**\n\n**RED Phase - Core Error Handling Tests:**\n- Test error classification system correctly categorizes critical vs non-critical errors\n- Validate exponential backoff retry logic with mock failures and timing verification\n- Test circuit breaker pattern opens/closes based on failure thresholds\n- Verify background retry queue persists and processes failed operations\n- Test user-facing error messages display contextually appropriate content\n\n**Integration Error Testing:**\n- Test database connection failure scenarios with connection pool exhaustion\n- Validate API timeout handling with simulated slow/failed responses\n- Test HubSpot integration failures with fallback lead capture mechanisms\n- Verify session recovery works correctly with interrupted assessment flows\n- Test assessment data validation catches and handles malformed submissions\n\n**User Experience Error Testing:**\n- Test toast notification system displays and dismisses correctly\n- Validate inline form error states show field-specific error messages\n- Test fallback UI components render when data loading fails\n- Verify loading states timeout gracefully with retry options\n- Test React error boundaries catch and isolate component failures\n\n**Monitoring & Performance Testing:**\n- Test error logging captures structured error data with proper severity levels\n- Validate error rate monitoring triggers alerts at configured thresholds\n- Test performance impact of error handling doesn't degrade user experience\n- Verify error tracking integration with analytics pipeline from Task 11",
        "status": "pending",
        "dependencies": [3, 11, 14, 16],
        "priority": "high",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-08-12T17:05:55.791Z",
      "description": "Default tasks context",
      "updated": "2025-08-13T13:28:44.113Z"
    }
  }
}
